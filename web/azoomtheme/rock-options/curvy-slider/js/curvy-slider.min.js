(function() {
  function Ha() {
    document.getElementById("wayNameHolder").getAttribute("curvyWayDir");
    document.getElementById("wayNameHolder").getAttribute("curvyWayUri");
    V = document.getElementById("curvy-data").getAttribute("sliderName");
    W = document.getElementById("curvy-data").getAttribute("sliderDBName");
    document.getElementById("wayNameHolder").getAttribute("way");
    m = JSON.parse(document.getElementById("curvy-data").getAttribute("data-text"));
    v = JSON.parse(document.getElementById("google-fonts-holder").getAttribute("data-text"));
    b = [];
    "undefined" == typeof m.slider_width && (m.slider_width = 1920);
    "undefined" == typeof m.slider_height && (m.slider_height = 700);
    n = parseInt(m.slider_width);
    if (isNaN(n) || 1 > n) {
      n = 1920;
    }
    p = parseInt(m.slider_height);
    if (isNaN(p) || 1 > p) {
      p = 700;
    }
    var c = m.fonts ? m.fonts : [];
    if (0 < c.length) {
      for (var a = 0;a < c.length;a++) {
        X.push(c[a]);
      }
      try {
        WebFont.load({google:{families:X}, fontactive:function(a, b) {
          oa++;
          oa >= X.length && !Y && (Y = !0, pa());
        }});
      } catch (e) {
      }
    } else {
      Y = !0, pa();
    }
  }
  function pa() {
    for (var b = [], a = 0;a < m.scenes.length;a++) {
      if ("undefined" != typeof m.scenes[a].imageArray) {
        for (var c = 0;c < m.scenes[a].imageArray.length;c++) {
          b.push({id:m.scenes[a].imageArray[c].id, url:m.scenes[a].imageArray[c].url});
        }
      }
    }
    if (0 < b.length) {
      a = new CAAT.Module.Preloader.Preloader;
      for (c = 0;c < b.length;c++) {
        a.addElement(b[c].id, b[c].url);
      }
      var g = !1;
      a.cerrored = function(a) {
        g || (g = !0, alert("One or more of your image files can not be loaded. Make sure your image url is correct and image exists"), Z());
      };
      a.load(function(a, b, c) {
        Z(a);
      });
    } else {
      Z();
    }
  }
  function Ia() {
    V = jQuery("#current_slider_name").val();
    var c = Ja(), c = {id:W.replace("curvy_slider_", ""), fonts:c, animationName:V, sliderDBName:W, scenes:[]}, a = jQuery(".curvy-slider-advanced-settings");
    c.slider_width = a.find(".slider_width").val();
    c.slider_height = a.find(".slider_height").val();
    c.slider_size_mode = a.find(".slider_size_mode").find(":selected").val();
    for (a = 0;a < b.length;a++) {
      var e = b[a], g = {actorElems:[], bg:{}};
      g.bg.bgType = b[a].bg.bgType;
      g.bg.bgURL = b[a].bg.bgURL;
      g.bg.bgColor = b[a].bg.bgColor;
      g.bg.bgVideoURL = b[a].bg.bgVideoURL;
      g.bg.bgColorAlpha = b[a].bg.bgColorAlpha;
      g.sceneDetails = {};
      g.sceneDetails.sceneTime = b[a].sceneDetails.sceneTime;
      g.sceneDetails.sceneDelay = b[a].sceneDetails.sceneDelay;
      g.sceneDetails.incomingMotion = b[a].sceneDetails.incomingMotion;
      g.sceneDetails.incomingAnchor = b[a].sceneDetails.incomingAnchor;
      g.sceneDetails.incomingEasing = b[a].sceneDetails.incomingEasing;
      g.sceneDetails.fallbackURL = b[a].sceneDetails.fallbackURL;
      g.imageArray = b[a].imageArray;
      for (var h = 0;h < e.actorElems.length;h++) {
        var k = {}, f = e.actorElems[h].path.numControlPoints();
        k.coordsArray = [];
        for (var l = 0;l < f;l++) {
          k.coordsArray.push(e.actorElems[h].path.getControlPoint(l));
        }
        k.delayTime = parseInt(e.actorElems[h].delayTime);
        k.motionTime = parseInt(e.actorElems[h].motionTime);
        k.objType = e.actorElems[h].objType;
        k.objText = e.actorElems[h].objText;
        k.enable_shadow = e.actorElems[h].enable_shadow;
        k.fontStyle = e.actorElems[h].fontStyle;
        k.objSrc = e.actorElems[h].objSrc;
        k.linkActive = e.actorElems[h].linkActive;
        k.objLink = e.actorElems[h].objLink;
        k.objBorderColor = e.actorElems[h].objBorderColor;
        k.objBGColor = e.actorElems[h].objBGColor;
        k.objBGHoverColor = e.actorElems[h].objBGHoverColor;
        k.paddingH = e.actorElems[h].paddingH;
        k.paddingV = e.actorElems[h].paddingV;
        k.bgRadius = e.actorElems[h].bgRadius;
        k.objColor = e.actorElems[h].objColor;
        k.objFontSize = e.actorElems[h].objFontSize;
        k.objFont = e.actorElems[h].objFont;
        k.elemID = e.actorElems[h].elemID;
        k.autoRotate = e.actorElems[h].autoRotate;
        k.auto_rotation_mode = e.actorElems[h].auto_rotation_mode;
        k.hideBeginning = e.actorElems[h].hideBeginning;
        k.easingName = e.actorElems[h].easingName;
        k.startAlpha = e.actorElems[h].startAlpha;
        k.endAlpha = e.actorElems[h].endAlpha;
        k.outOfSceneTime = e.actorElems[h].outOfSceneTime;
        k.waitOnSceneTime = e.actorElems[h].waitOnSceneTime;
        k.outOfSceneMotion = e.actorElems[h].outOfSceneMotion;
        k.scaleStart = e.actorElems[h].scaleStart;
        k.scaleEnd = e.actorElems[h].scaleEnd;
        g.actorElems.push(k);
      }
      c.scenes.push(g);
    }
    return c;
  }
  function Ka() {
    var d = c;
    for (c = c = 0;c < b.length;c++) {
      var a = "#" + b[c].theSceneID;
      jQuery(a + " .save-current-scene-details").trigger("click");
      jQuery(a + " .curvy-element-settings-container").each(function() {
        jQuery(this).find(".save-current-anim-element").length && jQuery(this).find(".save-current-anim-element").trigger("click");
        jQuery(this).find(".add_image_url_to_scene").length && jQuery(this).find(".add_image_url_to_scene").trigger("click");
      });
    }
    c = d;
  }
  function Ja() {
    var b = [];
    jQuery(".fontDataHolder").each(function() {
      if ("undefined" != typeof jQuery(this).attr("fontdata") && null != jQuery(this).attr("fontdata") && "sans" != jQuery(this).attr("fontdata") && "" != jQuery(this).attr("fontdata")) {
        for (var a = !1, c = 0;c < b.length;c++) {
          b[c] == jQuery(this).attr("fontdata") && (a = !0);
        }
        a || b.push(jQuery(this).attr("fontdata"));
      }
    });
    return b;
  }
  function y(b, a) {
    var c = !1;
    jQuery(b).find("option").each(function() {
      jQuery(this).attr("element") == a && (jQuery(this).attr("selected", "selected"), c = !0);
    });
    c || jQuery(b).find("option").each(function() {
      jQuery(this).attr("value") == a && (jQuery(this).attr("selected", "selected"), c = !0);
    });
  }
  function qa(d) {
    var a = I(), e = '<input autocomplete="off" type="text" id="colorpicker-' + a + '" value="' + l(b[c].bg.bgColor ? b[c].bg.bgColor : "#FFFFFF") + '" class="my-color-field" data-default-color="' + l(b[c].bg.bgColor ? b[c].bg.bgColor : "#FFFFFF") + '" />', g = d.split("-"), h = u(), k = u(), f = u(), e = '<div class="hidden scene-elem" id="' + d + '"><div class="elementHolder meta-box-sortables ui-sortable metabox-holder wrap"></div><div class="wrap"><div class="background-setting-canvas"><div style="background:#EEEEEE;"><strong style="padding:15px; display:block;">Scene Settings</strong></div><div class="background-settings"><div class="row"><div class="large-4 columns" style="overflow:visible;"><strong>Background Type : </strong><br/><select class="background-type" ><option value="transparent">Transparent</option><option value="color">Use Color</option><option value="image">Use Image</option><option value="video">Use Video</option><option value="video_color">Video and Color Overlay</option></select><div class="scene-bg-color-holder"><strong>Background Color : </strong><br/>' + 
    e + '</div><strong><span>Scene BG Color Alpha (Overlay Only) : </span><span class="bg_color_alpha ">' + l(b[c].bg.bgColorAlpha ? b[c].bg.bgColorAlpha : 1) + '</span></strong><br/><div id="' + f + '" class="ui-slider-no-conflict"></div><br/><br/><div class="image_nocode_container"><label for="upload_image"> <input autocomplete="off" id="background-image-id-' + d + '" placeholder="Background Image" class="upload_image_button" size="36" name="upload_image" type="text" value="' + l("undefined" != 
    typeof b[c].bg.bgURL ? b[c].bg.bgURL : "") + '" /> <input autocomplete="off" class="image_uploader_class button" value="Upload Image" type="button" /> </label></div><br/><div class="image_nocode_container"><label for="upload_image"> <input autocomplete="off" id="background-video-id-' + d + '" placeholder="Background Video" class="upload_image_button" size="36" name="upload_image" type="text" value="' + l("undefined" != typeof b[c].bg.bgVideoURL ? b[c].bg.bgVideoURL : "") + '" /> <input autocomplete="off" class="image_uploader_class button" value="Upload Video" type="button" /> </label></div><br/><div class="image_nocode_container"><label for="upload_image"> <input autocomplete="off" id="fallback-image-id-' + 
    d + '" placeholder="Video Fallback Image (For touch browsers)" class="upload_image_button" size="36" name="upload_image" type="text" value="' + l("undefined" !== typeof b[c].sceneDetails.fallbackURL ? b[c].sceneDetails.fallbackURL : "") + '" /> <input autocomplete="off" class="image_uploader_class button" value="Upload Image" type="button" /> </label></div><br/></div><div class="large-3 columns"><strong><span>Scene Transition Time : </span><span class="current-scene-time ">' + l(b[c].sceneDetails ? 
    b[c].sceneDetails.sceneTime : .65) + '</span></strong><br/><div id="' + h + '" class="ui-slider-no-conflict"></div><br/><strong><span>Scene Delay Time : </span><span class="current-scene-delay ">' + l(b[c].sceneDetails ? b[c].sceneDetails.sceneDelay : 6) + '</span></strong><br/><div id="' + k + '" class="ui-slider-no-conflict"></div><br/><a class="a_no_link duplicate-current-scene" elementbind="' + d + '"><i class="fa fa-copy"></i> Duplicate Scene</a></div><div class="large-4 columns"><div class="row"><div class="large-6 columns"><strong>Scene Easing : </strong></div><div class="large-6 columns"><select class="scene-incoming-easing"><option element="easeOut">easeOut</option><option element="easeIn">easeIn</option><option element="easeInOut">easeInOut</option><option element="bounce">Bounce</option><option element="linear">Linear</option></select></div></div><br/><div class="row"><div class="large-6 columns"><strong>Scene Incoming Motion : </strong></div><div class="large-6 columns"><select class="scene-incoming-motion"><option element="0">Slide</option><option element="1">Rotate</option><option element="2">Scale</option></select></div></div><br/><div class="row"><div class="large-6 columns"><strong>Scene Incoming Anchor : </strong></div><div class="large-6 columns"><select class="scene-incoming-anchor"><option element="0">Center</option><option element="1">Top</option><option element="2">Bottom</option><option element="3">Left</option><option element="4">Right</option><option element="5">Top Left</option><option element="6">Top Right</option><option element="7">Bottom Left</option><option element="8">Bottom Right</option></select></div></div></div><div class="large-1 columns"></td></div><div class=""><div class="large-12 columns"><a class="a_no_link save-current-scene-details" sceneBind="' + 
    d + '" elementBind="' + a + '" colorAlphaBind="bg-alpha-id-' + d + '" urlBind="background-image-id-' + d + '" videoUrlBind="background-video-id-' + d + '" fallbackBind="fallback-image-id-' + d + '">Update Background</a></div></div></div></div></div></div>';
    jQuery("#scenes-holder").append(e);
    jQuery("#colorpicker-" + a).wpColorPicker();
    La([{id:h, defaultVal:b[c].sceneDetails ? b[c].sceneDetails.sceneTime : .65}]);
    Ma([{id:k, defaultVal:b[c].sceneDetails ? b[c].sceneDetails.sceneDelay : 6}]);
    Na([{id:f, defaultVal:b[c].bg.bgColorAlpha ? b[c].bg.bgColorAlpha : 1}]);
    y("#" + d + " .scene-incoming-motion", b[c].sceneDetails ? b[c].sceneDetails.incomingMotion : 0);
    y("#" + d + " .scene-incoming-anchor", b[c].sceneDetails ? b[c].sceneDetails.incomingAnchor : 0);
    y("#" + d + " .scene-easing-type", b[c].sceneDetails ? b[c].sceneDetails.sceneEasing : "easeOut");
    y("#" + d + " .background-type", b[c].bg.bgType ? b[c].bg.bgType : "transparent");
    d = '<li id="scene-nav-' + g[1] + '" class="scene-nav-elem active" ref="scene-' + g[1] + '"><i class="drag fa fa-arrows"></i> <i class="fa fa-film"></i><span> Scene ' + g[1] + '</span><span class="remove-scene-container"><i class="fa fa-times remove-current-scene" scenebind="scene-' + g[1] + '"></i></span></li>';
    jQuery("#scenes-navigation ul li.add-new-scene-btn").before(d);
    E(b.length - 1);
  }
  function E(d) {
    if (!(d >= b.length)) {
      r.easeInOut(d, b[d].sceneDetails.incomingMotion, b[d].sceneDetails.incomingAnchor, c, b[c].sceneDetails.incomingMotion, b[c].sceneDetails.incomingAnchor, 1E3 * b[c].sceneDetails.sceneTime, 1, w(b[d].sceneDetails.incomingEasing), w(b[c].sceneDetails.incomingEasing));
      for (var a = 0;a < b.length;a++) {
        jQuery("#" + b[a].theSceneID).hasClass("hidden") || jQuery("#" + b[a].theSceneID).addClass("hidden");
      }
      c = d;
      b[c] && 0 < jQuery("#" + b[c].theSceneID).length && jQuery("#" + b[c].theSceneID).removeClass("hidden");
      jQuery("#scenes-navigation ul li.scene-nav-elem.active").removeClass("active");
      jQuery("#scene-nav-" + d).addClass("active");
    }
  }
  function ra(b, a, c) {
    jQuery("#" + c + "_bg_video").length && jQuery("#" + c + "_bg_video").remove();
    jQuery("#" + c).append('<div style="display:none;"><video id="' + c + '_bg_video" class="curvybgvideo_' + c + '" loop="true"><source src="' + b + '" type="video/mp4" /></video></div>');
    var g = document.getElementById(c + "_bg_video");
    b = document.createElement("canvas");
    b.width = n + t;
    b.height = p + q;
    var h = b.getContext("2d");
    b = (new CAAT.Foundation.SpriteImage).initialize(b, 1, 1);
    a.video_bg_timer = a.createTimer(0, 33, function(a, b, c) {
      c.reset(a);
      h.drawImage(g, t, q, n + t, p + q);
    });
    a = (new CAAT.Foundation.ActorContainer).setBounds(0, 0, r.width, r.height);
    b = (new CAAT.Foundation.Actor).setBackgroundImage(b.getRef(), !0);
    a.addChild(b);
    return a;
  }
  function N(b, a) {
    b.video_bg_timer.cancel();
    jQuery("#" + a + "_bg_video").parent().remove();
  }
  function F(d, a, e) {
    d = (d = "undefined" === typeof d || null == d ? null : d) ? (new CAAT.PathUtil.Path).beginPath(parseInt(d[0].x), parseInt(d[0].y)).addQuadricTo(parseInt(d[1].x), parseInt(d[1].y), parseInt(d[2].x), parseInt(d[2].y)).endPath() : (new CAAT.PathUtil.Path).beginPath(n / 2 + t, q + q / 3).addQuadricTo(n / 2 + t - 50, q / 3 * 7, n / 8 * 3, 2 * q).endPath();
    b[c].path.addSegment(d);
    b[c].pa.setPath(b[c].path);
    a && b[c].pa.setOnUpdateCallback(function(a) {
      for (a = 0;a < b[c].actorElems.length;a++) {
        b[c].actorElems[a].Actor.setLocation(b[c].actorElems[a].path.getControlPoint(2).x, b[c].actorElems[a].path.getControlPoint(2).y), jQuery("#" + b[c].actorElems[a].elemID + " .x1").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(0).x)), jQuery("#" + b[c].actorElems[a].elemID + " .y1").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(0).y)), jQuery("#" + b[c].actorElems[a].elemID + " .x2").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(1).x)), jQuery("#" + 
        b[c].actorElems[a].elemID + " .y2").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(1).y)), jQuery("#" + b[c].actorElems[a].elemID + " .x3").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(2).x)), jQuery("#" + b[c].actorElems[a].elemID + " .y3").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(2).y));
      }
    });
    return d;
  }
  function aa(d, a, e) {
    for (var g = 0;g < a.length;g++) {
    }
    for (var h = 0;h < b[c].path.pathSegments.length;h++) {
      if (b[c].path.pathSegments[h] == d.path) {
        for (var f = d.path.numControlPoints(), l = [], g = 0;g < f;g++) {
          l.push(d.path.getControlPoint(g));
        }
        for (g = 0;g < l.length;g++) {
        }
        b[c].path.pathSegments.splice(h, 1);
        break;
      }
    }
    d.path = (new CAAT.PathUtil.Path).beginPath(a[0], a[1]).addQuadricTo(a[2], a[3], a[4], a[5]).endPath();
    d.coordsArray = [];
    for (a = 0;a < d.path.numControlPoints();a++) {
      d.coordsArray.push(d.path.getControlPoint(a));
    }
    d.pathRemoved || (b[c].path.addSegment(d.path), b[c].pa.setPath(b[c].path));
    d.Actor.setLocation(parseInt(jQuery("#" + e + " .x3").val()), parseInt(jQuery("#" + e + " .y3").val()));
    b[c].pa.setOnUpdateCallback(function(a) {
      for (a = 0;a < b[c].actorElems.length;a++) {
        b[c].actorElems[a].Actor.setLocation(b[c].actorElems[a].path.getControlPoint(2).x, b[c].actorElems[a].path.getControlPoint(2).y), jQuery("#" + b[c].actorElems[a].elemID + " .x1").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(0).x)), jQuery("#" + b[c].actorElems[a].elemID + " .y1").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(0).y)), jQuery("#" + b[c].actorElems[a].elemID + " .x2").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(1).x)), jQuery("#" + 
        b[c].actorElems[a].elemID + " .y2").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(1).y)), jQuery("#" + b[c].actorElems[a].elemID + " .x3").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(2).x)), jQuery("#" + b[c].actorElems[a].elemID + " .y3").attr("value", parseInt(b[c].actorElems[a].path.getControlPoint(2).y));
      }
    });
  }
  function sa(d, a) {
    for (var e = 0;e < b[c].path.pathSegments.length;e++) {
      if (b[c].path.pathSegments[e] == d.path) {
        b[c].path.pathSegments.splice(e, 1);
        break;
      }
    }
    b[c].pa.setPath(b[c].path);
  }
  function Z(d) {
    jQuery(".loader-container").length && jQuery(".loader-container").remove();
    r = (new CAAT.Foundation.Director).initialize(n + 2 * t, p + 2 * q, "experiment-canvas");
    r.enableResizeEvents(CAAT.Foundation.Director.RESIZE_PROPORTIONAL);
    r.setImagesCache(d);
    ba = jQuery(".slider_size_mode").find(":selected").val();
    "fullscreen" == ba && (ca = !0);
    Oa();
    ta = (new CAAT.PathUtil.Path).endPath();
    (new CAAT.Foundation.UI.PathActor).enableEvents(!0).setBounds(0, 0, r.width, r.height).setInteractive(!0).setPath(ta).showBoundingBox(!1);
    ua();
    0 < b.length || va();
    CAAT.loop(30);
    jQuery(function() {
      jQuery(".ui-sortable").sortable({placeholder:"sortable-placeholder", handle:".handle", stop:function(a, d) {
        for (var g = d.item.attr("id"), h = d.item.index(), f = 0, l, f = 0;f < b[c].actorElems.length;f++) {
          if (b[c].actorElems[f].elemID == g) {
            l = b[c].actorElems[f];
            b[c].actorElems.splice(f, 1);
            break;
          }
        }
        b[c].actorElems.splice(h, 0, l);
        for (f = 0;f < b[c].theScene.childrenList.length;f++) {
          if (b[c].theScene.childrenList[f] == l.Actor) {
            b[c].theScene.childrenList.splice(f, 1);
            break;
          }
        }
        b[c].theScene.addChildAt(l.Actor, h + 1);
      }});
    });
    jQuery("#scenes-navigation ul").sortable({handle:"i.drag", stop:function(a, b) {
      Pa(a, b);
    }});
    jQuery(".elementHolder .postbox .inside").css("display", "none");
    jQuery(window).trigger("resize");
  }
  function Pa(c, a) {
    var e = parseInt(a.item.attr("ref").toString().replace("scene-", "")), g = a.item.index(), h = b[e], f = r.scenes[e];
    b.splice(e, 1);
    b.splice(g, 0, h);
    r.scenes.splice(e, 1);
    r.scenes.splice(g, 0, f);
    var l = 0, l = 0;
    jQuery(".scene-nav-elem").each(function() {
      parseInt(jQuery(this).attr("ref").toString().replace("scene-", ""));
      jQuery(this).attr("id", "scene-nav-" + l);
      jQuery(this).attr("ref", "scene-" + l);
      jQuery(this).find("span:not(.remove-scene-container)").html(" Scene " + l);
      l++;
    });
    E(0);
    for (e = 0;e < b.length;e++) {
    }
  }
  function va() {
    c = b.length;
    b[c] = {};
    b[c].theScene = r.createScene();
    b[c].theSceneID = "scene-" + c;
    b[c].path = (new CAAT.PathUtil.Path).endPath();
    b[c].pa = (new CAAT.Foundation.UI.PathActor).setBounds(0, 0, r.width, r.height).setInteractive(!0).setPath(b[c].path).showBoundingBox(!1);
    b[c].bg = {};
    b[c].bg.bgActor = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, q).setSize(n, p);
    b[c].theScene.addChildAt(b[c].bg.bgActor, 0);
    b[c].imageArray = [];
    b[c].sceneDetails = {};
    b[c].sceneDetails.sceneTime = .65;
    b[c].sceneDetails.sceneDelay = 6;
    b[c].sceneDetails.incomingMotion = 0;
    b[c].sceneDetails.incomingAnchor = 0;
    b[c].sceneDetails.incomingEasing = "easeOut";
    qa(b[c].theSceneID);
    b[c].actorElems = [];
    b[c].theScene.addChild(b[c].pa);
    jQuery("#scene-" + c).removeClass("hidden");
  }
  function Qa(d) {
    jQuery("#scene-" + d).remove();
    jQuery("#scene-nav-" + d).remove();
    b.splice(d, 1);
    r.scenes.splice(d, 1);
    jQuery(".scene-elem").each(function(a) {
      jQuery(this).attr("id", "scene-" + a);
      b[a].theSceneID = "scene-" + a;
      jQuery(this).find(".save-current-scene-details").attr("sceneBind", "scene-" + a);
      parseInt(jQuery(this).attr("id").toString().replace("scene-", ""));
    });
    jQuery(".scene-nav-elem").each(function(a) {
      jQuery(this).attr("id", "scene-nav-" + a);
      jQuery(this).attr("ref", "scene-" + a);
      jQuery(this).find("span:not(.remove-scene-container)").html(" Scene " + a);
      jQuery(this).find(".remove-scene-container .remove-current-scene").attr("scenebind", "scene-" + a);
      parseInt(jQuery(this).attr("id").toString().replace("scene-nav-", ""));
    });
    for (var a = 0;a < b.length;a++) {
    }
    d = parseInt(d);
    c = 0;
    0 <= d - 1 ? E(d - 1) : d + 1 < b.length ? E(d + 1) : c = d;
  }
  function ua(d) {
    2 < m.length && m.splice(2, 1);
    "undefined" == typeof d && (d = 0);
    for (c = d;d < m.scenes.length;d++) {
      c = d;
      var a = m.scenes[d];
      b[c] = {};
      b[c].theScene = r.createScene();
      b[c].path = (new CAAT.PathUtil.Path).endPath();
      b[c].pa = (new CAAT.Foundation.UI.PathActor).setBounds(0, 0, r.width, r.height).setInteractive(!0).setPath(b[c].path).showBoundingBox(!1);
      b[c].imageArray = "undefined" != typeof m.scenes[d].imageArray ? m.scenes[d].imageArray : [];
      b[c].bg = {};
      b[c].bg.bgType = m.scenes[d].bg.bgType;
      b[c].bg.bgURL = m.scenes[d].bg.bgURL;
      b[c].bg.bgColor = m.scenes[d].bg.bgColor;
      b[c].bg.bgVideoURL = m.scenes[d].bg.bgVideoURL;
      b[c].bg.bgColorAlpha = m.scenes[d].bg.bgColorAlpha;
      b[c].sceneDetails = {};
      b[c].sceneDetails.sceneTime = m.scenes[d].sceneDetails.sceneTime;
      b[c].sceneDetails.sceneDelay = m.scenes[d].sceneDetails.sceneDelay;
      b[c].sceneDetails.incomingMotion = m.scenes[d].sceneDetails.incomingMotion;
      b[c].sceneDetails.incomingAnchor = m.scenes[d].sceneDetails.incomingAnchor;
      b[c].sceneDetails.incomingEasing = m.scenes[d].sceneDetails.incomingEasing;
      b[c].sceneDetails.fallbackURL = m.scenes[d].sceneDetails.fallbackURL;
      b[c].theSceneID = "scene-" + c;
      qa(b[c].theSceneID);
      Ra();
      b[c].actorElems = [];
      for (var e = 0;e < a.actorElems.length;e++) {
        switch(a.actorElems[e].objType) {
          case "singleText":
            G(z, a.actorElems[e]);
            break;
          case "singleBoxedText":
            da(z, a.actorElems[e]);
            break;
          case "image":
            ea(z, a.actorElems[e]);
            break;
          case "button":
            break;
          default:
            G(z);
        }
      }
      b[c].theScene.addChild(b[c].pa);
    }
    c = b.length - 1;
    jQuery("#scene-" + c).removeClass("hidden");
  }
  function Ra() {
    if ("transparent" === b[c].bg.bgType) {
      b[c].bg.bgActor = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, q).setSize(n, p), b[c].theScene.addChildAt(b[c].bg.bgActor, 0), b[c].bg.bgActor.setFillStyle("rgba(0,0,0,0)");
    } else {
      if ("image" === b[c].bg.bgType) {
        b[c].bg.bgActor = (new CAAT.Foundation.ActorContainer).setBounds(0, 0, r.width, r.height).setSize(n, p).centerAt((n + 2 * t) / 2, (p + 2 * q) / 2);
        b[c].theScene.addChildAt(b[c].bg.bgActor, 0);
        var d = !1;
        ca && (d = !0);
        O(b[c].bg.bgActor, jQuery(this).attr("urlBind"), b[c].bg.bgURL, null, d);
      } else {
        "color" === b[c].bg.bgType ? (b[c].bg.bgActor = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, q).setSize(n, p), b[c].theScene.addChildAt(b[c].bg.bgActor, 0), b[c].bg.bgActor.setFillStyle(b[c].bg.bgColor)) : -1 < b[c].bg.bgType.indexOf("video") && "" != b[c].bg.bgVideoURL && (b[c].bg.bgActor = ra(b[c].bg.bgVideoURL, b[c].theScene, b[c].theSceneID), -1 < b[c].bg.bgType.indexOf("color") && (d = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, 
        q).setSize(n, p).setAlpha(b[c].bg.bgColorAlpha), b[c].bg.bgActor.addChild(d), d.setFillStyle(b[c].bg.bgColor)), b[c].theScene.addChildAt(b[c].bg.bgActor, 0));
      }
    }
  }
  function Oa() {
    fa = (new CAAT.Foundation.Director).initialize(n + 2 * t, p + 2 * q, "experiment-canvas-bg");
    fa.enableResizeEvents(CAAT.Foundation.Director.RESIZE_PROPORTIONAL);
    var b = fa.createScene();
    wa = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).setStrokeStyle("#999999").centerAt(t, q).setSize(n, p);
    var a = (new CAAT.Foundation.ActorContainer).setBounds(0, 0, r.width, r.height);
    a.fillStyle = "#d9d9d9";
    b.addChild(a);
    b.addChild(wa);
  }
  function ga(b, a, c) {
    return b = "" + ('<div class="button set_center_v" element_bind="' + b + '">Center Vertically</div>') + ('<div class="button set_center_h" element_bind="' + b + '">Center Horizontally</div>');
  }
  function xa(b, a, c) {
    return b = "" + ('<h4>Enable Shadow</h4><input autocomplete="off" class="enable_shadow" type="checkbox" value="" ' + ("undefined" !== typeof a && "undefined" !== typeof a.enable_shadow && a.enable_shadow ? 'checked="checked"' : "") + ">");
  }
  function G(d, a) {
    a = "undefined" === typeof a || null == a ? null : a;
    var e = P();
    a && (a.elemID = e);
    var g = I(), h = u(), k = u(), m = u(), n = u(), p = u(), r = u(), q = u(), t = ya(), v = '<div class="postbox no-margin" id="' + e + '"><div class="handlediv" title="Click to toggle"><br /></div><h3 class="handle"><input autocomplete="off" class="elem_checked_for_edit" elementBind="' + e + '" type="checkbox"> <span>' + l(a ? a.objText : "New Text") + '</span></h3><div class="inside curvy-element-settings-container"><div><div class="row" style="margin:0px -10px; width:auto;"><div class="large-6 columns element_tabs_link_container"><a class="a_no_link text_typography_settings-button">Text and Typography</a> | <a class="a_no_link animation_settings-button">Animation Details</a> | <a class="a_no_link coords_settings-button">Coordinates</a></div><div class="large-6 columns element_play_save_duplicate" style="text-align:right;"><a class="a_no_link remove-element removediv" elementBind="' + 
    e + '"><i class="fa fa-times"></i> Delete</a> | <a class="a_no_link duplicate-current-anim-element" elementBind="' + e + '"><i class="fa fa-copy"></i> Duplicate</a> | <a class="a_no_link save-current-anim-element" elementBind="' + e + '"><i class="icon-save"></i> Save Element</a> | <a class="a_no_link play-current-anim-element" elementBind="' + e + '"><i class="fa fa-play"></i> Play Element</a></div></div><div class="code-br"></div><div class="row text_typography_settings element_settings_tab"><h3>Text and Typography Settings</h3><div class="row"><div class="large-3 columns"><h4>Enter Your Text : </h4><input autocomplete="off" class="input-xlarge pull-left text-holder" type="text" value="' + 
    l(a ? a.objText : "New Text") + '" ></div><div class="large-3 columns"><h4>Text Font : </h4><input autocomplete="off" class="fontDataHolder" id="' + t + '" type="text" fontData="" /></div><div class="large-2 columns"><h4>Font Size : <span class="current-font-size ">' + l(a ? a.objFontSize : "40px") + '</span></h4><div id="' + h + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Font Color : </h4><input autocomplete="off" type="text" id="' + g + '" value="' + l(a ? 
    a.objColor : "#3e3e3e") + '" class="my-color-field" data-default-color="' + l(a ? a.objColor : "#3e3e3e") + '" /></div></div><div class="row"><div class="large-2 columns"><h4>Font Style</h4><select class="pull-left fontStyle span2"><option element="normal">Regular</option><option element="bold">Bold</option><option element="italic">Italic</option><option element="bold italic">Bold + Italic</option><option element="100">100</option><option element="200">200</option><option element="300">300</option><option element="400">400</option><option element="500">500</option><option element="600">600</option><option element="700">700</option><option element="800">800</option></select></div><div class="large-3 columns"><h4><label class="checkbox link-checkbox"><input autocomplete="off" type="checkbox" value=""> Activate Linking</label></h4><div class="code-br"></div><span class="input-xlarge uneditable-input" style="max-width:255px;"></span></div><div class="large-3 columns">' + 
    xa(e, a ? a : "", d) + '</div><div class="large-4 columns"></div></div></div><div class="row animation_settings element_settings_tab hide"><h3>Animation Details</h3><div class="row"><div class="large-2 columns"><h4>Motion Time : <span class="current-time ">' + l(a ? parseInt(a.motionTime) / 1E3 : .65) + ' sec.</span></h4><div id="' + m + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Delay Time : <span class="current-delay ">' + l(a ? parseInt(a.delayTime) / 1E3 : 
    .65) + ' sec.</span></h4><div id="' + k + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Easing</h4><select class="pull-left add-animation-easing">' + ha() + '</select></div><div class="large-2 columns"><h4>Alpha Start : <span class="current-start-alpha ">' + l(a ? a.startAlpha : 1) + '</span></h4><div id="' + n + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Alpha End : <span class="current-end-alpha ">' + l(a ? a.endAlpha : 1) + 
    '</span></h4><div id="' + p + '" class="ui-slider-no-conflict"></div></div><div class="large-1 columns"><h4>Hide</h4><label class="checkbox hideElemBeginning"><input autocomplete="off" type="checkbox" value="">Hide At Beginning</label></div><div class="large-1 columns"><h4>Rotate</h4><label class="checkbox autoRotate"><input autocomplete="off" type="checkbox" value="">Auto Rotate</label></div></div><div class="row"><div class="large-2 columns"><h4>Wait on scene : <span class="current-wait-time">' + 
    l(a ? a.waitOnSceneTime / 1E3 : 3) + '</span></h4><div id="' + r + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Out of scene motion time : <span class="current-out-time">' + l(a ? a.outOfSceneTime / 1E3 : .65) + '</span></h4><div id="' + q + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Out of Scene Motion</h4><select class="pull-left outOfSceneMotion span2"><option element="noMotion">No Motion</option><option element="toRight">To Right</option><option element="toLeft">To Left</option><option element="toTop">To Top</option><option element="toBottom">To Bottom</option><option element="alpha">Alpha</option></select></div><div class="large-1 columns"></div></div></div><div class="row coords_settings element_settings_tab hide"><h3>Coordinates</h3><div class="row"><div class="large-2 columns"><h4>Start X : </h4><input autocomplete="off" class="input-small pull-left text-holder x1" type="text" value="' + 
    l(a ? parseInt(a.coordsArray[0].x) : 1150) + '"><br /><h4>Start Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y1" type="text" value="' + l(a ? parseInt(a.coordsArray[0].y) : 219) + '"></div><div class="large-2 columns"><h4>Curve X : </h4><input autocomplete="off" class="input-small pull-left text-holder x2" type="text" value="' + l(a ? parseInt(a.coordsArray[1].x) : 1130) + '"><br /><h4>Curve Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y2" type="text" value="' + 
    l(a ? parseInt(a.coordsArray[1].y) : 350) + '"><br /></div><div class="large-2 columns"><h4>End X : </h4><input autocomplete="off" class="input-small pull-left text-holder x3" type="text" value="' + l(a ? parseInt(a.coordsArray[2].x) : 780) + '"><br /><h4>End Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y3" type="text" value="' + l(a ? parseInt(a.coordsArray[2].y) : 280) + '"><br /></div><div class="large-2 columns"><h4>Start Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-start" type="text" value="' + 
    l(a ? a.scaleStart : 1) + '"><br /><h4>End Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-end" type="text" value="' + l(a ? a.scaleEnd : 1) + '"><br /></div><div class="large-2 columns"><div style="height:50px;"></div><div class="button setCoordsBtn" elementBind="' + e + '"><i class="icon-level-up"></i> Update Coords</div></div><div class="large-2 columns">' + ga(e, a ? a : "", d) + "</div></div></div></div></div></div>";
    jQuery("#" + b[c].theSceneID + " .elementHolder").append(v);
    Q([{id:g, defaultVal:a ? a.objColor : null}]);
    za([{id:h, defaultVal:a ? a.objFontSize.replace("px", "") : null}]);
    ia([{id:m, defaultVal:a ? parseInt(a.motionTime) : null}]);
    ja([{id:k, defaultVal:a ? parseInt(a.delayTime) : null}]);
    ka([{id:n, defaultVal:a ? a.startAlpha : null}]);
    la([{id:p, defaultVal:a ? a.endAlpha : null}]);
    ma([{id:r, defaultVal:a ? a.waitOnSceneTime : null}]);
    na([{id:q, defaultVal:a ? a.outOfSceneTime : null}]);
    Aa([{id:t, defaultVal:a ? a.objFont : null}]);
    y("#" + e + " .outOfSceneMotion", a ? a.outOfSceneMotion : "noMotion");
    y("#" + e + " .add-animation-easing", a ? a.easingName : "easeOut");
    y("#" + e + " .fontStyle", a ? a.fontStyle : "regular");
    a && 1 == a.autoRotate && jQuery("#" + e + " label.autoRotate input").attr("checked", "checked");
    a && 1 == a.hideBeginning && jQuery("#" + e + " label.hideElemBeginning input").attr("checked", "checked");
    a && a.linkActive && (jQuery("#" + e + " label.link-checkbox input").attr("checked", "checked"), jQuery("#" + e + " .uneditable-input").remove(), jQuery("#" + e + " .link-checkbox").parent().append('<input autocomplete="off" class="input-xlarge link-holder" type="text"></input>'), jQuery("#" + e + " .link-holder").attr("value", a.objLink));
    g = "Baumans";
    a && a.objFont && (g = a.objFont, g.indexOf(":") && (g = g.split(":"), g = g[0]));
    g = (new CAAT.Foundation.UI.TextActor).setFont(a ? a.fontStyle + " " + a.objFontSize + " " + g : "40px Baumans").setText(jQuery("#" + e + " .text-holder").val()).setLocation(a ? a.coordsArray[0].x : 1800, a ? a.coordsArray[0].y : 400).setAlpha(a ? a.startAlpha : 1).setTextFillStyle(a ? a.objColor : "#3e3e3e").enableEvents(!0).setShadow(a && a.enable_shadow ? a.enable_shadow : !1).emptyBehaviorList();
    k = a ? F(a.coordsArray, g, a.elemID) : F(null, g, e);
    a && 1 == a.hideBeginning && g.setAlpha(0);
    g.addBehavior((new CAAT.Behavior.PathBehavior).setPath(k).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3).setCycle(!1).setAutoRotate(a && a.autoRotate ? !0 : !1, a && a.autoRotate ? CAAT.PathBehavior.autorotate.FREE : !1).setInterpolator(a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4))).addBehavior((new CAAT.Behavior.AlphaBehavior).setInterpolator(a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? 
    a.startAlpha : 1, a ? a.endAlpha : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3)).addBehavior((new CAAT.Behavior.ScaleBehavior).setInterpolator(a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? a.scaleStart : 1, a ? a.scaleEnd : 1, a ? a.scaleStart : 1, a ? a.scaleEnd : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3));
    h = a ? a : {};
    a || (h.coordsArray = [], h.delayTime = 650, h.motionTime = 650, h.outOfSceneTime = 650, h.waitOnSceneTime = 3, h.outOfSceneMotion = "noMotion", h.objType = "singleText", h.objText = "New Text", h.fontStyle = "", h.objSrc = "", h.linkActive = !1, h.objLink = "", h.objBorderColor = "", h.objColor = "#3e3e3e", h.objFontSize = "40px", h.objFont = "sans", h.elemID = e, h.autoRotate = !1, h.hideBeginning = !1, h.easingName = "", h.startAlpha = 1, h.endAlpha = 1, h.scaleStart = 1, h.scaleEnd = 1);
    h.pathRemoved = !1;
    h.path = k;
    k = h.path.numControlPoints();
    if (0 >= h.coordsArray.length) {
      for (m = 0;m < k;m++) {
        h.coordsArray.push(h.path.getControlPoint(m));
      }
    }
    h.Actor = g;
    h.easing = a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4);
    b[c].actorElems || (b[c].actorElems = []);
    b[c].actorElems.push(h);
    a && a.linkActive && J(g, a.objLink);
    b[c].theScene.addChildAt(g, b[c].theScene.childrenList.length);
    a && "noMotion" != a.outOfSceneMotion && K(h, h.outOfSceneMotion);
    f = x(e);
  }
  function da(d, a) {
    a = "undefined" === typeof a || null == a ? null : a;
    var e = P();
    a && (a.elemID = e);
    var g = I(), h = I(), k = I(), m = u(), n = u(), p = u(), r = u(), q = u(), t = u(), v = u(), z = u(), A = u(), B = u(), C = ya(), D = '<div class="postbox no-margin" id="' + e + '"><div class="handlediv" title="Click to toggle"><br /></div><h3 class="handle"><input autocomplete="off" class="elem_checked_for_edit" elementBind="' + e + '" type="checkbox"> <span>' + l(a ? a.objText : "New Text") + '</span></h3><div class="inside curvy-element-settings-container"><div><div class="row" style="margin:0px -10px; width:auto;"><div class="large-6 columns element_tabs_link_container"><a class="a_no_link text_typography_settings-button">Text and Typography</a> | <a class="a_no_link text_box_settings-button">Box Settings</a> | <a class="a_no_link animation_settings-button">Animation Details</a> | <a class="a_no_link coords_settings-button">Coordinates</a></div><div class="large-6 columns element_play_save_duplicate" style="text-align:right;"><a class="a_no_link remove-element removediv" elementBind="' + 
    e + '"><i class="fa fa-times"></i> Delete</a> | <a class="a_no_link duplicate-current-anim-element" elementBind="' + e + '"><i class="fa fa-copy"></i> Duplicate</a> | <a class="a_no_link save-current-anim-element" elementBind="' + e + '"><i class="icon-save"></i> Save Element</a> | <a class="a_no_link play-current-anim-element" elementBind="' + e + '"><i class="fa fa-play"></i> Play Element</a></div></div><div class="code-br"></div><div class="row text_typography_settings element_settings_tab"><h3>Text and Typography Settings</h3><div class="row"><div class="large-3 columns"><h4>Enter Your Text</h4><input autocomplete="off" class="input-xlarge pull-left text-holder" type="text" value="' + 
    l(a ? a.objText : "New Text") + '" ></div><div class="large-3 columns"><h4>Choose Font</h4><input autocomplete="off" class="fontDataHolder" id="' + C + '" type="text" fontData="" /></div><div class="large-2 columns"><h4>Font Size : <span class="current-font-size ">' + l(a ? a.objFontSize : "40px") + '</span></h4><div id="' + m + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Font Color</h4><input autocomplete="off" type="text" id="' + g + '" value="' + l(a ? a.objColor : 
    "#f0f0f0") + '" class="font-color" data-default-color="' + l(a ? a.objColor : "#f0f0f0") + '" /></div></div><div class="row"><div class="large-2 columns"><h4>Font Style</h4><select class="pull-left fontStyle span2"><option element="normal">Regular</option><option element="bold">Bold</option><option element="italic">Italic</option><option element="bold italic">Bold + Italic</option><option element="100">100</option><option element="200">200</option><option element="300">300</option><option element="400">400</option><option element="500">500</option><option element="600">600</option><option element="700">700</option><option element="800">800</option></select></div><div class="large-3 columns"><h4><label class="checkbox link-checkbox"><input autocomplete="off" type="checkbox" value=""> Activate Linking</label></h4><div class="code-br"></div><span class="input-xlarge uneditable-input" style="max-width:255px;"></span></div><div class="large-3 columns">' + 
    xa(e, a ? a : "", d) + '</div><div class="large-4 columns"></div></div></div><div class="row animation_settings element_settings_tab hide"><h3>Animation Details</h3><div class="row"><div class="large-2 columns"><h4>Motion Time : <span class="current-time ">' + l(a ? parseInt(a.motionTime) / 1E3 : .65) + ' sec.</span></h4><div id="' + p + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Delay Time : <span class="current-delay ">' + l(a ? parseInt(a.delayTime) / 1E3 : 
    .65) + ' sec.</span></h4><div id="' + n + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Easing</h4><select class="pull-left add-animation-easing">' + ha() + '</select></div><div class="large-2 columns"><h4>Alpha Start : <span class="current-start-alpha ">' + (a ? a.startAlpha : 1) + '</span></h4><div id="' + r + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Alpha End : <span class="current-end-alpha ">' + (a ? a.endAlpha : 1) + '</span></h4><div id="' + 
    q + '" class="ui-slider-no-conflict"></div></div><div class="large-1 columns"><h4>Hide</h4><label class="checkbox hideElemBeginning"><input autocomplete="off" type="checkbox" value="">Hide At Beginning</label></div><div class="large-1 columns"><h4>Rotate</h4><label class="checkbox autoRotate"><input autocomplete="off" type="checkbox" value="">Auto Rotate</label></div></div><div class="row"><div class="large-2 columns"><h4>Wait on scene : <span class="current-wait-time">' + l(a ? a.waitOnSceneTime / 
    1E3 : 3) + '</span></h4><div id="' + t + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Out of scene motion time : <span class="current-out-time">' + l(a ? a.outOfSceneTime / 1E3 : .65) + '</span></h4><div id="' + v + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Out of Scene Motion</h4><select class="pull-left outOfSceneMotion span2"><option element="noMotion">No Motion</option><option element="toRight">To Right</option><option element="toLeft">To Left</option><option element="toTop">To Top</option><option element="toBottom">To Bottom</option><option element="alpha">Alpha</option></select></div><div class="large-1 columns"></div></div></div><div class="row coords_settings element_settings_tab hide"><h3>Coordinates</h3><div class="row"><div class="large-2 columns"><h4>Start X : </h4><input autocomplete="off" class="input-small pull-left text-holder x1" type="text" value="' + 
    l(a ? parseInt(a.coordsArray[0].x) : 1150) + '"><br /><h4>Start Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y1" type="text" value="' + l(a ? parseInt(a.coordsArray[0].y) : 219) + '"></div><div class="large-2 columns"><h4>Curve X : </h4><input autocomplete="off" class="input-small pull-left text-holder x2" type="text" value="' + l(a ? parseInt(a.coordsArray[1].x) : 1130) + '"><br /><h4>Curve Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y2" type="text" value="' + 
    l(a ? parseInt(a.coordsArray[1].y) : 350) + '"><br /></div><div class="large-2 columns"><h4>End X : </h4><input autocomplete="off" class="input-small pull-left text-holder x3" type="text" value="' + l(a ? parseInt(a.coordsArray[2].x) : 780) + '"><br /><h4>End Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y3" type="text" value="' + l(a ? parseInt(a.coordsArray[2].y) : 280) + '"><br /></div><div class="large-2 columns"><h4>Start Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-start" type="text" value="' + 
    l(a ? a.scaleStart : 1) + '"><br /><h4>End Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-end" type="text" value="' + l(a ? a.scaleEnd : 1) + '"><br /></div><div class="large-2 columns"><div style="height:50px;"></div><div class="button setCoordsBtn" elementBind="' + e + '"><i class="icon-level-up"></i> Update Coords</div></div><div class="large-2 columns">' + ga(e, a ? a : "", d) + '</div></div></div><div class="row text_box_settings element_settings_tab hide"><h3>Box Settings</h3><div class="row"><div class="large-3 columns"><h4>Horizontal Padding : <span class="padding-horizontal">' + 
    l(a ? a.paddingH : 40) + '</span></h4><div id="' + z + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Vertical Padding : <span class="padding-vertical">' + l(a ? a.paddingV : 40) + '</span></h4><div id="' + A + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Border Radius : <span class="bg-radius">' + l(a ? a.bgRadius : 15) + '</span></h4><div id="' + B + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"></div></div><div class="row"><div class="large-3 columns"><h4>Background Color</h4><input autocomplete="off" type="text" id="' + 
    h + '" value="' + l(a ? a.objBGColor : "#333333") + '" class="bg-color" data-default-color="' + l(a ? a.objBGColor : "#333333") + '" /></div><div class="large-3 columns"><h4>Background Hover Color</h4><input autocomplete="off" type="text" id="' + k + '" value="' + l(a ? a.objBGHoverColor : "#333333") + '" class="bg-hover-color" data-default-color="' + l(a ? a.objBGHoverColor : "#666666") + '" /></div><div class="large-6 columns"></div></div></div></div></div></div>';
    jQuery("#" + b[c].theSceneID + " .elementHolder").append(D);
    Q([{id:g, defaultVal:a ? a.objColor : null}]);
    Q([{id:h, defaultVal:a ? a.objBGColor : "#ffffff"}]);
    Q([{id:k, defaultVal:a ? a.objBGHoverColor : "#ffffff"}]);
    za([{id:m, defaultVal:a ? a.objFontSize.replace("px", "") : null}]);
    ia([{id:p, defaultVal:a ? parseInt(a.motionTime) : null}]);
    ja([{id:n, defaultVal:a ? parseInt(a.delayTime) : null}]);
    ka([{id:r, defaultVal:a ? a.startAlpha : null}]);
    la([{id:q, defaultVal:a ? a.endAlpha : null}]);
    ma([{id:t, defaultVal:a ? a.waitOnSceneTime : null}]);
    na([{id:v, defaultVal:a ? a.outOfSceneTime : null}]);
    Sa([{id:z, defaultVal:a ? a.paddingH : 40}]);
    Ta([{id:A, defaultVal:a ? a.paddingV : 40}]);
    Ua([{id:B, defaultVal:a ? a.bgRadius : 40}]);
    Aa([{id:C, defaultVal:a ? a.objFont : null}]);
    y("#" + e + " .outOfSceneMotion", a ? a.outOfSceneMotion : "noMotion");
    y("#" + e + " .add-animation-easing", a ? a.easingName : "easeOut");
    y("#" + e + " .fontStyle", a ? a.fontStyle : "regular");
    a && 1 == a.autoRotate && jQuery("#" + e + " label.autoRotate input").attr("checked", "checked");
    a && 1 == a.hideBeginning && jQuery("#" + e + " label.hideElemBeginning input").attr("checked", "checked");
    a && a.linkActive && (jQuery("#" + e + " label.link-checkbox input").attr("checked", "checked"), jQuery("#" + e + " .uneditable-input").remove(), jQuery("#" + e + " .link-checkbox").parent().append('<input autocomplete="off" class="input-xlarge link-holder" type="text"></input>'), jQuery("#" + e + " .link-holder").attr("value", a.objLink));
    g = "Baumans";
    a && a.objFont && (g = a.objFont, g.indexOf(":") && (g = g.split(":"), g = g[0]));
    g = (new CAAT.Foundation.UI.TextActor).setFont(a ? a.fontStyle + " " + a.objFontSize + " " + g : "40px Baumans").setText(jQuery("#" + e + " .text-holder").val()).setShadow(a && a.enable_shadow ? a.enable_shadow : !1).setTextFillStyle(a ? a.objColor : "#f0f0f0");
    g.centerAt((g.textWidth + parseInt(a ? a.paddingH : 40)) / 2, (g.textHeight + parseInt(a ? a.paddingV : 30)) / 2);
    h = (new CAAT.Foundation.ActorContainer).setLocation(a ? a.coordsArray[0].x : 1800, a ? a.coordsArray[0].y : 400).setAlpha(a ? a.startAlpha : 1).enableEvents(!0).emptyBehaviorList();
    h.addChild(g);
    k = Ba(g.textWidth + parseInt(a ? a.paddingH : 40), g.textHeight + parseInt(a ? a.paddingV : 30), parseInt(a ? a.bgRadius : 10), a ? a.objBGColor : "#333333");
    h.setBackgroundImage(k);
    m = a ? F(a.coordsArray, h, a.elemID) : F(null, h, e);
    a && 1 == a.hideBeginning && h.setAlpha(0);
    h.setGlobalAlpha(!0).addBehavior((new CAAT.Behavior.PathBehavior).setPath(m).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3).setCycle(!1).setAutoRotate(a && a.autoRotate ? !0 : !1, a && a.autoRotate ? CAAT.PathBehavior.autorotate.FREE : !1).setInterpolator(a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4))).addBehavior((new CAAT.Behavior.AlphaBehavior).setInterpolator(a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? 
    a.startAlpha : 1, a ? a.endAlpha : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3)).addBehavior((new CAAT.Behavior.ScaleBehavior).setInterpolator(a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? a.scaleStart : 1, a ? a.scaleEnd : 1, a ? a.scaleStart : 1, a ? a.scaleEnd : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3));
    k = a ? a : {};
    a || (k.coordsArray = [], k.delayTime = 650, k.motionTime = 650, k.outOfSceneTime = 650, k.waitOnSceneTime = 3, k.outOfSceneMotion = "noMotion", k.objType = "singleBoxedText", k.objText = "New Text", k.fontStyle = "", k.objSrc = "", k.linkActive = !1, k.objLink = "", k.objBorderColor = "", k.objColor = "#3e3e3e", k.objFontSize = "40px", k.objFont = "sans", k.elemID = e, k.autoRotate = !1, k.hideBeginning = !1, k.easingName = "", k.startAlpha = 1, k.endAlpha = 1, k.scaleStart = 1, k.scaleEnd = 
    1);
    k.pathRemoved = !1;
    k.path = m;
    m = k.path.numControlPoints();
    if (0 >= k.coordsArray.length) {
      for (n = 0;n < m;n++) {
        k.coordsArray.push(k.path.getControlPoint(n));
      }
    }
    k.Actor = h;
    k.textActor = g;
    k.easing = a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4);
    b[c].actorElems || (b[c].actorElems = []);
    b[c].actorElems.push(k);
    a && a.linkActive && J(h, a.objLink, a);
    b[c].theScene.addChildAt(h, b[c].theScene.childrenList.length);
    a && "noMotion" != a.outOfSceneMotion && K(k, k.outOfSceneMotion);
    f = x(e);
  }
  function Ba(b, a, c, g) {
    var h = document.createElement("canvas");
    c = "undefined" == typeof c ? c = 20 : c;
    var f = h.getContext("2d");
    h.width = b;
    h.height = a;
    f.fillStyle = g;
    f.clearRect(0, 0, b, a);
    f.beginPath();
    f.moveTo(c, 0);
    f.lineTo(b - c, 0);
    f.quadraticCurveTo(b, 0, b, c);
    f.lineTo(b, a - c);
    f.quadraticCurveTo(b, a, b - c, a);
    f.lineTo(c, a);
    f.quadraticCurveTo(0, a, 0, a - c);
    f.lineTo(0, c);
    f.quadraticCurveTo(0, 0, c, 0);
    f.closePath();
    f.fill();
    return h;
  }
  function ea(d, a, e) {
    a = "undefined" === typeof a || null == a ? null : a;
    var g = P();
    a && (a.elemID = g);
    u();
    var h = u(), k = u(), m = u(), n = u(), p = u(), q = u(), t = a ? a.objSrc.substr(a.objSrc.lastIndexOf("/") + 1) : "New Image";
    a && a.objSrc && Ca({id:g, url:a.objSrc}, c);
    d = '<div class="postbox no-margin" id="' + g + '"><div class="handlediv" title="Click to toggle"><br /></div><h3 class="handle"><input autocomplete="off" class="elem_checked_for_edit" elementBind="' + g + '" type="checkbox"> <span>' + l(t) + '</span></h3><div class="inside curvy-element-settings-container"><div><div class="row" style="margin:0px -10px; width:auto;"><div class="large-6 columns element_tabs_link_container"><a class="a_no_link image_settings-button">Image Settings</a> | <a class="a_no_link animation_settings-button">Animation Details</a> | <a class="a_no_link coords_settings-button">Coordinates</a></div><div class="large-6 columns element_play_save_duplicate" style="text-align:right;"><a class="a_no_link remove-element removediv" elementBind="' + 
    g + '"><i class="fa fa-times"></i> Delete</a> | <a class="a_no_link duplicate-current-anim-element" elementBind="' + g + '"><i class="fa fa-copy"></i> Duplicate</a> | <a class="a_no_link save-current-anim-element" elementBind="' + g + '"><i class="icon-save"></i> Save Element</a> | <a class="a_no_link play-current-anim-element" elementBind="' + g + '"><i class="fa fa-play"></i> Play Element</a></div></div><div class="code-br"></div><div class="row image_settings element_settings_tab"><h3>Image Settings</h3><div class="row"><div class="image_nocode_container large-9 columns"><h5>Background Image</h5><label for="upload_image"> <input autocomplete="off" id="background-image-id-' + 
    g + '" class="upload_image_button" style="width:auto;" size="76" name="upload_image" type="text" value="' + l(a ? a.objSrc : "") + '" /> <div class="button image_uploader_class">Upload Image</div><div class="button add_image_url_to_scene" elementBind="' + g + '">Add To Scene</div> </label></div><div class="large-3 columns"><h4><label class="checkbox link-checkbox"><input autocomplete="off" type="checkbox" value=""> Activate Linking</label></h4><div class="code-br"></div><span class="input-xlarge uneditable-input" style="max-width:255px;"></span></div></div></div><div class="hide dataHolder"></div><div class="row animation_settings element_settings_tab hide"><h3>Animation Details</h3><div class="row"><div class="large-2 columns"><h4>Motion Time : <span class="current-time ">' + 
    l(a ? parseInt(a.motionTime) / 1E3 : .65) + ' sec.</span></h4><div id="' + k + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Delay Time : <span class="current-delay ">' + l(a ? parseInt(a.delayTime) / 1E3 : .65) + ' sec.</span></h4><div id="' + h + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Easing</h4><select class="pull-left add-animation-easing">' + ha() + '</select></div><div class="large-2 columns"><h4>Alpha Start : <span class="current-start-alpha ">' + 
    l(a ? a.startAlpha : 1) + '</span></h4><div id="' + m + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Alpha End : <span class="current-end-alpha ">' + l(a ? a.endAlpha : 1) + '</span></h4><div id="' + n + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Rotate</h4><label class="checkbox autoRotate"><input autocomplete="off" type="checkbox" value="">Auto Rotate</label><select class="pull-left auto_rotation_mode span2"><option value="">Free Mode</option><option value="LEFT_TO_RIGHT">Left To Right</option><option value="RIGHT_TO_LEFT">Right To Left</option></select></div></div><div class="row"><div class="large-2 columns"><h4>Wait on scene : <span class="current-wait-time">' + 
    l(a ? a.waitOnSceneTime / 1E3 : 3) + '</span></h4><div id="' + p + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Out of scene motion time : <span class="current-out-time">' + l(a ? a.outOfSceneTime / 1E3 : .65) + '</span></h4><div id="' + q + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Out of Scene Motion</h4><select class="pull-left outOfSceneMotion span2"><option element="noMotion">No Motion</option><option element="toRight">To Right</option><option element="toLeft">To Left</option><option element="toTop">To Top</option><option element="toBottom">To Bottom</option><option element="alpha">Alpha</option></select></div><div class="large-3 columns"></div><div class="large-2 columns"><h4>Hide</h4><label class="checkbox hideElemBeginning"><input autocomplete="off" type="checkbox" value="">Hide At Beginning</label></div></div></div><div class="row coords_settings element_settings_tab hide"><h3>Coordinates</h3><div class="row"><div class="large-2 columns"><h4>Start X : </h4><input autocomplete="off" class="input-small pull-left text-holder x1" type="text" value="' + 
    l(a ? parseInt(a.coordsArray[0].x) : 1150) + '"><br /><h4>Start Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y1" type="text" value="' + l(a ? parseInt(a.coordsArray[0].y) : 219) + '"></div><div class="large-2 columns"><h4>Curve X : </h4><input autocomplete="off" class="input-small pull-left text-holder x2" type="text" value="' + l(a ? parseInt(a.coordsArray[1].x) : 1130) + '"><br /><h4>Curve Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y2" type="text" value="' + 
    l(a ? parseInt(a.coordsArray[1].y) : 350) + '"><br /></div><div class="large-2 columns"><h4>End X : </h4><input autocomplete="off" class="input-small pull-left text-holder x3" type="text" value="' + l(a ? parseInt(a.coordsArray[2].x) : 780) + '"><br /><h4>End Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y3" type="text" value="' + l(a ? parseInt(a.coordsArray[2].y) : 280) + '"><br /></div><div class="large-2 columns"><h4>Start Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-start" type="text" value="' + 
    l(a ? a.scaleStart : 1) + '"><br /><h4>End Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-end" type="text" value="' + l(a ? a.scaleEnd : 1) + '"><br /></div><div class="large-2 columns"><div style="height:50px;"></div><div class="button setCoordsBtn" elementBind="' + g + '"><i class="icon-level-up"></i> Update Coords</div></div><div class="large-2 columns">' + ga(g, a ? a : "", d) + "</div></div></div></div></div></div>";
    jQuery("#" + b[c].theSceneID + " .elementHolder").append(d);
    ia([{id:k, defaultVal:a ? parseInt(a.motionTime) : null}]);
    ja([{id:h, defaultVal:a ? parseInt(a.delayTime) : null}]);
    ka([{id:m, defaultVal:a ? a.startAlpha : null}]);
    la([{id:n, defaultVal:a ? a.endAlpha : null}]);
    ma([{id:p, defaultVal:a ? a.waitOnSceneTime : null}]);
    na([{id:q, defaultVal:a ? a.outOfSceneTime : null}]);
    y("#" + g + " .outOfSceneMotion", a ? a.outOfSceneMotion : "noMotion");
    y("#" + g + " .add-animation-easing", a ? a.easingName : "easeOut");
    y("#" + g + " .auto_rotation_mode", a && a.auto_rotation_mode ? a.auto_rotation_mode : "FREE");
    k = !1;
    if (a && 1 == a.autoRotate && (jQuery("#" + g + " label.autoRotate input").attr("checked", "checked"), a.auto_rotation_mode)) {
      switch(a.auto_rotation_mode) {
        case "LEFT_TO_RIGHT":
          k = CAAT.PathBehavior.autorotate.LEFT_TO_RIGHT;
          break;
        case "RIGHT_TO_LEFT":
          k = CAAT.PathBehavior.autorotate.RIGHT_TO_LEFT;
          break;
        case "FREE":
          k = CAAT.PathBehavior.autorotate.FREE;
          break;
        default:
          k = CAAT.PathBehavior.autorotate.FREE;
      }
    }
    a && 1 == a.hideBeginning && jQuery("#" + g + " label.hideElemBeginning input").attr("checked", "checked");
    a && a.linkActive && (jQuery("#" + g + " label.link-checkbox input").attr("checked", "checked"), jQuery("#" + g + " .uneditable-input").remove(), jQuery("#" + g + " .link-checkbox").parent().append('<input autocomplete="off" class="input-xlarge link-holder" type="text"></input>'), jQuery("#" + g + " .link-holder").attr("value", a.objLink));
    h = (new CAAT.Foundation.Actor).setLocation(a ? a.coordsArray[0].x : 1800, a ? a.coordsArray[0].y : 400).enableEvents(!0).setPositionAnchor(.5, .5).emptyBehaviorList();
    a && (e ? O(h, a.elemID, a.objSrc) : h.setBackgroundImage(r.getImage(a.elemID)));
    m = a ? F(a.coordsArray, h, a.elemID) : F(null, h, g);
    a && 1 == a.hideBeginning && h.setAlpha(0);
    h.addBehavior((new CAAT.Behavior.PathBehavior).setValues(m).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3).setCycle(!1).setAutoRotate(a && a.autoRotate ? !0 : !1, a && a.autoRotate ? k : !1).setInterpolator(a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4))).addBehavior((new CAAT.Behavior.AlphaBehavior).setInterpolator(a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? a.startAlpha : 
    1, a ? a.endAlpha : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3)).addBehavior((new CAAT.Behavior.ScaleBehavior).setInterpolator(a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? a.scaleStart : 1, a ? a.scaleEnd : 1, a ? a.scaleStart : 1, a ? a.scaleEnd : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3));
    e = a ? a : {};
    a || (e.coordsArray = [], e.delayTime = 650, e.motionTime = 650, e.outOfSceneTime = 650, e.waitOnSceneTime = 3, e.outOfSceneMotion = "noMotion", e.objType = "image", e.objText = "New Text", e.fontStyle = "", e.objSrc = "", e.linkActive = !1, e.objLink = "", e.objBorderColor = "", e.objColor = "#3e3e3e", e.objFontSize = "40px", e.objFont = "sans", e.elemID = g, e.autoRotate = !1, e.hideBeginning = !1, e.easingName = "", e.startAlpha = 1, e.endAlpha = 1, e.scaleStart = 1, e.scaleEnd = 1);
    e.pathRemoved = !1;
    e.path = m;
    k = e.path.numControlPoints();
    if (0 >= e.coordsArray.length) {
      for (m = 0;m < k;m++) {
        e.coordsArray.push(e.path.getControlPoint(m));
      }
    }
    e.Actor = h;
    e.easing = a ? w(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4);
    b[c].actorElems || (b[c].actorElems = []);
    b[c].actorElems.push(e);
    a && a.linkActive && J(h, a.objLink);
    b[c].theScene.addChildAt(h, b[c].theScene.childrenList.length);
    a && "noMotion" != a.outOfSceneMotion && K(e, e.outOfSceneMotion);
    "" !== jQuery("#" + g + " .upload_image_button").val() && jQuery("#" + g + " .add_image_url_to_scene").trigger("click");
    f = x(g);
  }
  function Ca(d, a) {
    "undefined" == typeof a && (a = c);
    for (var e = !1, g = 0;g < b[a].imageArray.length;g++) {
      b[a].imageArray[g] == d && (e = !0);
    }
    e || b[a].imageArray.push(d);
  }
  function O(d, a, e, g, f) {
    var k = {};
    k.url = e;
    k.id = a;
    var l = "undefined" != typeof f && f ? !0 : !1;
    "undefined" != typeof b[c] && Ca(k, c);
    (new CAAT.Module.Preloader.Preloader).addElement(a, e).load(function(a) {
      d.setBackgroundImage(a[a.length - 1].image);
      if (l) {
        a = parseInt(n + 2 * t) / 2;
        var b = parseInt(p + 2 * q) / 2;
        d.centerAt(a, b);
      }
      "undefined" != typeof callback && g();
    });
  }
  function l(b) {
    return String(b).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
  }
  function J(b, a, c) {
    "undefined" == typeof c ? (b.mouseClick = function(b) {
      window.location.href = a;
    }, b.mouseEnter = function(a) {
      document.getElementById("experiment-canvas").style.cursor = "pointer";
    }, b.mouseExit = function(a) {
      document.getElementById("experiment-canvas").style.cursor = "default";
    }) : "singleBoxedText" != c.objType || c.buttonCover || (c.buttonCover = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).setBounds(0, 0, b.width, b.height).setFillStyle("blue").setAlpha(0), c.buttonCover.mouseClick = function(b) {
      window.location.href = a;
    }, c.buttonCover.mouseEnter = function(a) {
      document.getElementById("experiment-canvas").style.cursor = "pointer";
      c.objBGHoverColor && (a = c.actor_bg_shape.getContext("2d"), a.fillStyle = c.objBGHoverColor, a.fill());
    }, c.buttonCover.mouseExit = function(a) {
      document.getElementById("experiment-canvas").style.cursor = "default";
      c.objBGHoverColor && (a = c.actor_bg_shape.getContext("2d"), a.fillStyle = c.objBGColor, a.fill());
    }, b.addChild(c.buttonCover));
  }
  function Da(b, a) {
    a && a.buttonCover ? (a.Actor.removeChild(a.buttonCover), a.buttonCover.mouseClick = function(a) {
    }, a.buttonCover.mouseEnter = function(a) {
    }, a.buttonCover.mouseExit = function(a) {
    }, a.buttonCover = null) : (b.mouseClick = function(a) {
    }, b.mouseEnter = function(a) {
    }, b.mouseExit = function(a) {
    });
  }
  function Ea() {
    for (var d = 0;d < R.length;d++) {
      R[d].pause();
    }
    for (d = 0;d < b[c].actorElems.length;d++) {
      b[c].actorElems[d].Actor.setGlobalAlpha(!0).setLocation(b[c].actorElems[d].coordsArray[0].x, b[c].actorElems[d].coordsArray[0].y).setAlpha(1 == b[c].actorElems[d].hideBeginning ? 0 : b[c].actorElems[d].startAlpha);
    }
  }
  function S() {
    var d = c;
    L();
    M = setTimeout(function() {
      d++;
      d >= b.length && (d = 0);
      E(d);
      c = d;
      H || S();
    }, 1E3 * b[c].sceneDetails.sceneDelay);
  }
  function L() {
    Ea();
    -1 < b[c].bg.bgType.indexOf("video") && jQuery(".curvybgvideo_scene-" + c).length && (jQuery(".curvybgvideo_scene-" + c).attr("data-video-ready-to-start") && "true" === jQuery(".curvybgvideo_scene-" + c).attr("data-video-ready-to-start") ? (jQuery(".curvybgvideo_scene-" + c)[0].currentTime = 0, jQuery(".curvybgvideo_scene-" + c)[0].play(), R.push(jQuery(".curvybgvideo_scene-" + c)[0])) : jQuery(".curvybgvideo_scene-" + c)[0].oncanplay = function() {
      jQuery(".curvybgvideo_scene-" + c)[0].currentTime = 0;
      jQuery(".curvybgvideo_scene-" + c)[0].play();
      R.push(jQuery(".curvybgvideo_scene-" + c)[0]);
      jQuery(".curvybgvideo_scene-" + c)[0].oncanplay = !1;
      jQuery(".curvybgvideo_scene-" + c).attr("data-video-ready-to-start", "true");
    });
    for (var d = 0;d < b[c].actorElems.length;d++) {
      var a = !1;
      if (b[c].actorElems[d] && 1 == b[c].actorElems[d].autoRotate && b[c].actorElems[d].auto_rotation_mode) {
        switch(b[c].actorElems[d].auto_rotation_mode) {
          case "LEFT_TO_RIGHT":
            a = CAAT.PathBehavior.autorotate.LEFT_TO_RIGHT;
            break;
          case "RIGHT_TO_LEFT":
            a = CAAT.PathBehavior.autorotate.RIGHT_TO_LEFT;
            break;
          case "FREE":
            a = CAAT.PathBehavior.autorotate.FREE;
            break;
          default:
            a = CAAT.PathBehavior.autorotate.FREE;
        }
      }
      b[c].actorElems[d].Actor.emptyBehaviorList().setRotation(0).setGlobalAlpha(!0).setScale(b[c].actorElems[d].scaleStart, b[c].actorElems[d].scaleStart).addBehavior((new CAAT.Behavior.PathBehavior).setValues(b[c].actorElems[d].path).setDelayTime(b[c].actorElems[d].delayTime, b[c].actorElems[d].motionTime).setCycle(!1).setAutoRotate(b[c].actorElems[d].autoRotate ? !0 : !1, b[c].actorElems[d].autoRotate ? a : !1).setInterpolator(b[c].actorElems[d].easing)).addBehavior((new CAAT.Behavior.AlphaBehavior).setValues(b[c].actorElems[d].startAlpha, 
      b[c].actorElems[d].endAlpha).setDelayTime(b[c].actorElems[d].delayTime, b[c].actorElems[d].motionTime).setInterpolator(b[c].actorElems[d].easing)).addBehavior((new CAAT.Behavior.ScaleBehavior).setValues(b[c].actorElems[d].scaleStart, b[c].actorElems[d].scaleEnd, b[c].actorElems[d].scaleStart, b[c].actorElems[d].scaleEnd).setDelayTime(b[c].actorElems[d].delayTime, b[c].actorElems[d].motionTime).setInterpolator(b[c].actorElems[d].easing));
      "noMotion" != b[c].actorElems[d].outOfSceneMotion && K(b[c].actorElems[d], b[c].actorElems[d].outOfSceneMotion);
    }
  }
  function za(b) {
    for (var a = 0;a < b.length;a++) {
      jQuery("#" + b[a].id).slider({max:200, min:6, step:1, value:b[a].defaultVal ? b[a].defaultVal : 40, slide:function(a, b) {
        jQuery(this).parent().find(".current-font-size").html(b.value + "px");
      }});
    }
  }
  function ia(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? c / 1E3 : .65;
      jQuery("#" + b[a].id).slider({max:40, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-time").html(b.value + " sec.");
      }});
    }
  }
  function ja(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? c / 1E3 : .65;
      jQuery("#" + b[a].id).slider({max:30, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-delay").html(b.value + " sec.");
      }});
    }
  }
  function La(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal;
      c || 0 == c || (c = .65);
      jQuery("#" + b[a].id).slider({max:20, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-scene-time").html(b.value + " sec.");
      }});
    }
  }
  function Ma(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal;
      c || 0 == c || (c = 6);
      jQuery("#" + b[a].id).slider({max:40, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-scene-delay").html(b.value + " sec.");
      }});
    }
  }
  function Na(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal;
      c || 0 == c || (c = 1);
      jQuery("#" + b[a].id).slider({max:1, min:0, step:.01, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".bg_color_alpha").html(b.value);
      }});
    }
  }
  function ka(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal;
      c || 0 == c || (c = 1);
      jQuery("#" + b[a].id).slider({max:1, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-start-alpha").html(b.value);
      }});
    }
  }
  function la(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal;
      c || 0 == c || (c = 1);
      jQuery("#" + b[a].id).slider({max:1, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-end-alpha").html(b.value);
      }});
    }
  }
  function ma(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? c / 1E3 : 1;
      jQuery("#" + b[a].id).slider({max:10, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-wait-time").html(b.value);
      }});
    }
  }
  function na(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? c / 1E3 : 1;
      jQuery("#" + b[a].id).slider({max:10, min:.05, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-out-time").html(b.value);
      }});
    }
  }
  function Sa(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? parseInt(c) : 1;
      jQuery("#" + b[a].id).slider({max:100, min:1, step:1, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".padding-horizontal").html(b.value);
      }});
    }
  }
  function Ta(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? parseInt(c) : 1;
      jQuery("#" + b[a].id).slider({max:100, min:1, step:1, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".padding-vertical").html(b.value);
      }});
    }
  }
  function Ua(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? parseInt(c) : 1;
      jQuery("#" + b[a].id).slider({max:100, min:0, step:1, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".bg-radius").html(b.value);
      }});
    }
  }
  function Aa(b) {
    for (var a = 0;a < b.length;a++) {
      jQuery("#" + b[a].id).fontselect().change(function() {
        var a = jQuery(this).val().replace(/\+/g, " ");
        jQuery(this).attr("fontData", a);
      }).attr("fontData", b[a].defaultVal).parent().find("div.font-select > a > span").css("font-family", b[0].defaultVal).html(b[a].defaultVal);
    }
  }
  function Q(b) {
    for (var a = 0;a < b.length;a++) {
      jQuery("#" + b[a].id).wpColorPicker();
    }
  }
  function u() {
    var b;
    if (0 < jQuery("#amount-slider-" + A).length) {
      for (;0 < jQuery("#amount-slider-" + A).length;) {
        A++, 0 >= jQuery("#amount-slider-" + A).length && (b = A);
      }
    } else {
      A++, b = A - 1;
    }
    return "amount-slider-" + b;
  }
  function ya() {
    var b;
    if (0 < jQuery("#google-font-" + B).length) {
      for (;0 < jQuery("#google-font-" + B).length;) {
        B++, 0 >= jQuery("#google-font-" + B).length && (b = B);
      }
    } else {
      B++, b = B - 1;
    }
    return "google-font-" + b;
  }
  function I() {
    var b;
    if (0 < jQuery("#colorpicker-" + C).length) {
      for (;0 < jQuery("#colorpicker-" + C).length;) {
        C++, 0 >= jQuery("#colorpicker-" + C).length && (b = C);
      }
    } else {
      C++, b = C - 1;
    }
    Va.push("colorpicker-" + b);
    return "colorpicker-" + b;
  }
  function ha(b) {
    return '<option element="Linear">Linear</option><option element="ExpoIn">EaseIn</option><option element="ExpoOut">EaseOut</option><option element="ExpoInOut">EaseInOut</option><option element="ExpoIn4">EaseInQuart</option><option element="ExpoOut4">EaseOutQuart</option><option element="ExpoInOut4">EaseInOutQuart</option><option element="ExpoIn6">EaseInExpo</option><option element="ExpoOut6">EaseOutExpo</option><option element="ExpoInOut6">EaseInOutExpo</option><option element="BounceIn">BounceIn</option><option element="BounceOut">BounceOut</option><option element="BounceInOut">BounceInOut</option>';
  }
  function w(b) {
    switch(b) {
      case "Linear":
        return (new CAAT.Behavior.Interpolator).createLinearInterpolator(!1, !1);
      case "LinearBounce":
        return (new CAAT.Behavior.Interpolator).createLinearInterpolator(!0, !1);
      case "ExpoIn":
        return (new CAAT.Behavior.Interpolator).createExponentialInInterpolator(2, !1);
      case "ExpoOut":
        return (new CAAT.Behavior.Interpolator).createExponentialOutInterpolator(2, !1);
      case "ExpoInOut":
        return (new CAAT.Behavior.Interpolator).createExponentialInOutInterpolator(2, !1);
      case "ExpoInBounce":
        return (new CAAT.Behavior.Interpolator).createExponentialInInterpolator(2, !0);
      case "ExpoOutBounce":
        return (new CAAT.Behavior.Interpolator).createExponentialOutInterpolator(2, !0);
      case "ExpoInOutBounce":
        return (new CAAT.Behavior.Interpolator).createExponentialInOutInterpolator(2, !0);
      case "ExpoIn4":
        return (new CAAT.Behavior.Interpolator).createExponentialInInterpolator(4, !1);
      case "ExpoOut4":
        return (new CAAT.Behavior.Interpolator).createExponentialOutInterpolator(4, !1);
      case "ExpoInOut4":
        return (new CAAT.Behavior.Interpolator).createExponentialInOutInterpolator(4, !1);
      case "ExpoIn4Bounce":
        return (new CAAT.Behavior.Interpolator).createExponentialInInterpolator(4, !0);
      case "ExpoOut4Bounce":
        return (new CAAT.Behavior.Interpolator).createExponentialOutInterpolator(4, !0);
      case "ExpoInOut4Bounce":
        return (new CAAT.Behavior.Interpolator).createExponentialInOutInterpolator(4, !0);
      case "ExpoIn6":
        return (new CAAT.Behavior.Interpolator).createExponentialInInterpolator(6, !1);
      case "ExpoOut6":
        return (new CAAT.Behavior.Interpolator).createExponentialOutInterpolator(6, !1);
      case "ExpoInOut6":
        return (new CAAT.Behavior.Interpolator).createExponentialInOutInterpolator(6, !1);
      case "ExpoIn6Bounce":
        return (new CAAT.Behavior.Interpolator).createExponentialInInterpolator(6, !0);
      case "ExpoOut6Bounce":
        return (new CAAT.Behavior.Interpolator).createExponentialOutInterpolator(6, !0);
      case "ExpoInOut6Bounce":
        return (new CAAT.Behavior.Interpolator).createExponentialInOutInterpolator(6, !0);
      case "BounceIn":
        return (new CAAT.Behavior.Interpolator).createBounceInInterpolator(!1);
      case "BounceOut":
        return (new CAAT.Behavior.Interpolator).createBounceOutInterpolator(!1);
      case "BounceInOut":
        return (new CAAT.Behavior.Interpolator).createBounceInOutInterpolator(!1);
      case "BounceInBounce":
        return (new CAAT.Behavior.Interpolator).createBounceInInterpolator(!0);
      case "BounceOutBounce":
        return (new CAAT.Behavior.Interpolator).createBounceOutInterpolator(!0);
      case "BounceInOutBounce":
        return (new CAAT.Behavior.Interpolator).createBounceInOutInterpolator(!0);
      case "easeIn":
        return (new CAAT.Behavior.Interpolator).createExponentialInInterpolator(6, !1);
      case "easeOut":
        return (new CAAT.Behavior.Interpolator).createExponentialOutInterpolator(6, !1);
      case "easeInOut":
        return (new CAAT.Behavior.Interpolator).createExponentialInOutInterpolator(6, !1);
      case "bounce":
        return (new CAAT.Behavior.Interpolator).createBounceOutInterpolator(!1);
      case "elastic":
        return (new CAAT.Behavior.Interpolator).createElasticOutInterpolator(1, .2, !1);
      case "linear":
        return (new CAAT.Behavior.Interpolator).createLinearInterpolator(!1, !1);
      default:
        return (new CAAT.Behavior.Interpolator).createLinearInterpolator(!1, !1);
    }
  }
  function P() {
    if (jQuery("#elem-" + D).length) {
      for (;jQuery("#elem-" + D).length;) {
        if (D++, 0 >= jQuery("#elem-" + D).length) {
          return "elem-" + D;
        }
      }
    } else {
      return D++, "elem-" + (D - 1);
    }
  }
  function x(d) {
    for (var a = 0;a < b[c].actorElems.length;a++) {
      if (b[c].actorElems[a].elemID == d) {
        return a;
      }
    }
  }
  function K(b, a) {
    var c = 0, c = 0, c = b.Actor.width, f = b.Actor.height, h = b.path.numControlPoints();
    b.coordsArray = [];
    for (var k = 0;k < h;k++) {
      b.coordsArray.push(b.path.getControlPoint(k));
    }
    if ("noMotion" != a) {
      if ("toRight" == a) {
        c = "image" == b.objType ? n + t + c / 2 + 40 : n + t + 40, c = (new CAAT.LinearPath).setInitialPosition(parseInt(b.coordsArray[2].x), parseInt(b.coordsArray[2].y)).setFinalPosition(parseInt(c), parseInt(b.coordsArray[2].y));
      } else {
        if ("toLeft" == a) {
          c = "image" == b.objType ? t - 40 - c / 2 : t - 40 - c, c = (new CAAT.LinearPath).setInitialPosition(parseInt(b.coordsArray[2].x), parseInt(b.coordsArray[2].y)).setFinalPosition(parseInt(c), parseInt(b.coordsArray[2].y));
        } else {
          if ("toTop" == a) {
            c = "image" == b.objType ? q - 40 - f / 2 : q - 40 - f, c = (new CAAT.LinearPath).setInitialPosition(parseInt(b.coordsArray[2].x), parseInt(b.coordsArray[2].y)).setFinalPosition(parseInt(b.coordsArray[2].x), parseInt(c));
          } else {
            if ("toBottom" == a) {
              c = "image" == b.objType ? q + p + 40 + f / 2 : q + p + 40, c = (new CAAT.LinearPath).setInitialPosition(parseInt(b.coordsArray[2].x), parseInt(b.coordsArray[2].y)).setFinalPosition(parseInt(b.coordsArray[2].x), parseInt(c));
            } else {
              "alpha" == a && b.Actor.setGlobalAlpha(!0).addBehavior((new CAAT.Behavior.AlphaBehavior).setValues(b.endAlpha, 0).setDelayTime(b.motionTime + b.delayTime + b.waitOnSceneTime, b.outOfSceneTime));
              return;
            }
          }
        }
      }
      b.Actor.setGlobalAlpha(!0).addBehavior((new CAAT.Behavior.PathBehavior).setValues(c).setDelayTime(b.motionTime + b.delayTime + b.waitOnSceneTime, b.outOfSceneTime).setCycle(!1).setAutoRotate(!1).setInterpolator(b.easing));
    }
  }
  var Wa = setInterval(function() {
    "complete" === document.readyState && (clearInterval(Wa), Ha());
  }, 10), X = [], oa = 0, Y = !1, n = 1920, p = 700, t = 240, q = 150, n = 1920, p = 700, ba = "responsive", ca = !1, R = [], m, W, V = "Slider-Anim-0";
  jQuery(document).on("click", "#save-all-scenes", function() {
    jQuery("#save-all-scenes span.save-status").html(' <i class="fa fa-refresh fa-spin"></i>');
    Ka();
    var b = Ia();
    null != b && jQuery.post(ajaxurl, {curvyAnimationData:JSON.stringify(b), animationGoogleFonts:JSON.stringify(v), action:"curvy_save_animation"}, function(a) {
      null != a && (parseInt(n) != parseInt(b.slider_width) || parseInt(p) != parseInt(b.slider_height) ? location.reload() : ba != jQuery(".slider_size_mode").find(":selected").val() ? location.reload() : (jQuery("#save-all-scenes span.save-status").html(' <i class="fa fa-check-square-o"></i>'), setTimeout(function() {
        jQuery("#save-all-scenes span.save-status").html("");
      }, 2E3)));
    });
  });
  var r, ta, wa, v = [];
  jQuery(document).on("click", ".save-current-scene-details", function() {
    var d = "#" + jQuery(this).attr("sceneBind");
    b[c].imageArray = [];
    b[c].sceneDetails.sceneTime = Number(jQuery(d + " .current-scene-time").html().replace(" sec.", ""));
    b[c].sceneDetails.sceneDelay = Number(jQuery(d + " .current-scene-delay").html().replace(" sec.", ""));
    b[c].sceneDetails.incomingMotion = parseInt(jQuery(d + " .scene-incoming-motion").find(":selected").attr("element"));
    b[c].sceneDetails.incomingAnchor = parseInt(jQuery(d + " .scene-incoming-anchor").find(":selected").attr("element"));
    b[c].sceneDetails.incomingEasing = jQuery(d + " .scene-incoming-easing").find(":selected").attr("element");
    b[c].sceneDetails.fallbackURL = jQuery("#" + jQuery(this).attr("fallbackBind")).val();
    var a = jQuery("#colorpicker-" + jQuery(this).attr("elementBind")).val(), e = b[c].bg.bgType;
    "undefined" == typeof e && (e = "");
    b[c].bg.bgType = jQuery("#" + b[c].theSceneID + " .background-type").find(":selected").val();
    b[c].bg.bgURL = jQuery("#" + jQuery(this).attr("urlBind")).val();
    b[c].bg.bgVideoURL = jQuery("#" + jQuery(this).attr("videoUrlBind")).val();
    b[c].bg.bgColor = a;
    b[c].bg.bgColorAlpha = Number(jQuery(d + " .bg_color_alpha ").html().replace(" sec.", ""));
    "transparent" === b[c].bg.bgType ? (b[c].bg.bgActor.setFillStyle("rgba(0,0,0,0)"), "transparent" != e && (-1 < e.indexOf("video") && N(b[c].theScene, b[c].theSceneID), b[c].theScene.removeChildAt(0), b[c].bg.bgActor = null, b[c].bg.bgActor = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, q).setSize(n, p), b[c].theScene.addChildAt(b[c].bg.bgActor, 0))) : "image" === b[c].bg.bgType && "" != jQuery("#" + jQuery(this).attr("urlBind")).val() && 
    void 0 != jQuery("#" + jQuery(this).attr("urlBind")).val() ? ("image" != e && (-1 < e.indexOf("video") && N(b[c].theScene, b[c].theSceneID), b[c].theScene.removeChildAt(0), b[c].bg.bgActor = null, b[c].bg.bgActor = (new CAAT.Foundation.ActorContainer).setBounds(0, 0, r.width, r.height).setSize(n, p).centerAt((n + 2 * t) / 2, (p + 2 * q) / 2), b[c].theScene.addChildAt(b[c].bg.bgActor, 0)), d = !1, ca && (d = !0), O(b[c].bg.bgActor, jQuery(this).attr("urlBind"), b[c].bg.bgURL, null, d)) : "color" === 
    b[c].bg.bgType ? ("color" != e && (-1 < e.indexOf("video") && N(b[c].theScene, b[c].theSceneID), b[c].theScene.removeChildAt(0), b[c].bg.bgActor = null, b[c].bg.bgActor = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, q).setSize(n, p), b[c].theScene.addChildAt(b[c].bg.bgActor, 0)), b[c].bg.bgActor.setFillStyle(b[c].bg.bgColor)) : -1 < b[c].bg.bgType.indexOf("video") && "" != b[c].bg.bgVideoURL && (-1 < e.indexOf("video") && N(b[c].theScene, 
    b[c].theSceneID), b[c].theScene.removeChildAt(0), b[c].bg.bgActor = null, b[c].bg.bgActor = ra(b[c].bg.bgVideoURL, b[c].theScene, b[c].theSceneID), -1 < b[c].bg.bgType.indexOf("color") && (d = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, q).setSize(n, p).setAlpha(b[c].bg.bgColorAlpha), b[c].bg.bgActor.addChild(d), d.setFillStyle(b[c].bg.bgColor)), b[c].theScene.addChildAt(b[c].bg.bgActor, 0));
  });
  var b = [], c = 0, z = "scene-0";
  jQuery(window).resize(function() {
    var b = parseInt(jQuery("#experiment-canvas").css("height").toString().replace("px", "")) + 15;
    jQuery("#experiment-holder").css("height", b + 30);
  });
  jQuery(document).on("click", ".add-new-scene-btn", function() {
    jQuery("#" + b[c].theSceneID).addClass("hidden");
    va();
  });
  jQuery(document).on("click", "li.scene-nav-elem span:not(.remove-scene-container)", function() {
    var b = jQuery(this).parents("li.scene-nav-elem").attr("ref").split("-");
    E(b[1]);
    L();
  });
  jQuery(document).on("click", ".remove-current-scene", function() {
    if (!(1 >= b.length)) {
      var c = jQuery(this).attr("scenebind");
      confirm("Are you sure you want to delete this scene?") && "undefined" != typeof c && Qa(c.toString().replace("scene-", ""));
    }
  });
  jQuery(document).on("click", ".duplicate-current-scene", function(b) {
    b.preventDefault();
    b = jQuery(this).attr("elementbind");
    if ("undefined" !== typeof b && (b = b.replace("scene-", ""), "undefined" !== typeof m.scenes[b])) {
      b = jQuery.extend(!0, {}, m.scenes[b]);
      for (var a = 0;a < b.actorElems.length;a++) {
        b.actorElems[a].elemID = !1;
      }
      m.scenes.push(b);
      ua(m.scenes.length - 1);
    }
  });
  var fa;
  jQuery(document).on("click", ".remove-element", function() {
    var d = jQuery(this).attr("elementBind");
    f = x(d);
    if (confirm("Are you sure you want to delete this element?")) {
      sa(b[c].actorElems[f]);
      var a = b[c].actorElems[f].elemID, e, g;
      for (e = 0;e < v.length;e++) {
        for (g = 0;g < v[e].elemID.length;g++) {
          if (v[e].elemID[g] == a) {
            v[e].elemID.splice(g, 1);
            1 > v[e].elemID.length && v.splice(e, 1);
            break;
          }
        }
      }
      b[c].theScene.removeChild(b[c].actorElems[f].Actor);
      b[c].actorElems.splice(f, 1);
      jQuery("#" + d).remove();
    }
  });
  jQuery(document).on("click", ".add-animation-element li", function() {
    jQuery(this).parent().find(".selected").removeClass("selected");
    jQuery(this).addClass("selected");
  });
  jQuery(document).on("click", " .add-element-btn", function() {
    if (jQuery("#add-animation-element-id").find(".selected").length) {
      switch(jQuery("#add-animation-element-id").find(".selected").attr("element")) {
        case "singleText":
          G(z, null);
          break;
        case "singleBoxedText":
          da(z, null);
          break;
        case "image":
          ea(z, null);
          break;
        case "button":
          break;
        default:
          G(z);
      }
      b[c].theScene.removeChild(b[c].pa);
      b[c].theScene.addChild(b[c].pa);
    }
  });
  var Fa, T;
  jQuery(document).on("click", ".image_uploader_class", function() {
    Fa = jQuery(this).parent().find(".upload_image_button").attr("id");
    T = wp.media.frames.file_frame = wp.media({title:"Choose Image", button:{text:"Choose Image"}, multiple:!1});
    T.on("select", function() {
      var b = T.state().get("selection").first().toJSON();
      jQuery("#" + Fa).attr("value", b.url);
    });
    T.open();
  });
  jQuery(document).on("click", ".duplicate-current-anim-element", function() {
    jQuery(this).attr("elementBind");
    f = x(jQuery(this).attr("elementBind"));
    var d = jQuery.extend(!0, {}, b[c].actorElems[f]);
    d.elemID = P();
    switch(d.objType) {
      case "singleText":
        G(b[c].theSceneID, d);
        break;
      case "singleBoxedText":
        da(b[c].theSceneID, d);
        break;
      case "image":
        ea(b[c].theSceneID, d, !0);
        break;
      case "button":
        break;
      default:
        G(z);
    }
    b[c].theScene.removeChild(b[c].pa);
    b[c].theScene.addChild(b[c].pa);
  });
  jQuery(document).on("click", ".text_typography_settings-button", function() {
    jQuery(this).parent().parent().parent().parent().find(".element_settings_tab").hide();
    jQuery(this).parent().parent().parent().parent().find(".text_typography_settings").show();
  });
  jQuery(document).on("click", ".animation_settings-button", function() {
    jQuery(this).parent().parent().parent().parent().find(".element_settings_tab").hide();
    jQuery(this).parent().parent().parent().parent().find(".animation_settings").show();
  });
  jQuery(document).on("click", ".coords_settings-button", function() {
    jQuery(this).parent().parent().parent().parent().find(".element_settings_tab").hide();
    jQuery(this).parent().parent().parent().parent().find(".coords_settings").show();
  });
  jQuery(document).on("click", ".text_box_settings-button", function() {
    jQuery(this).parent().parent().parent().parent().find(".element_settings_tab").hide();
    jQuery(this).parent().parent().parent().parent().find(".text_box_settings").show();
  });
  jQuery(document).on("click", ".image_settings-button", function() {
    jQuery(this).parent().parent().parent().parent().find(".element_settings_tab").hide();
    jQuery(this).parent().parent().parent().parent().find(".image_settings").show();
  });
  jQuery(document).on("click", ".set_center_v", function() {
    var d = jQuery(this).attr("element_bind"), a = "#" + d;
    f = x(d);
    var e = b[c].actorElems[f].Actor, g = 0, g = "image" === b[c].actorElems[f].objType ? parseInt(p / 2 + q) : parseInt((p - e.height) / 2 + q);
    jQuery(a + " .y1").val(g);
    jQuery(a + " .y2").val(g);
    jQuery(a + " .y3").val(g);
    e = [];
    e.push(parseInt(jQuery(a + " .x1").val()));
    e.push(parseInt(jQuery(a + " .y1").val()));
    e.push(parseInt(jQuery(a + " .x2").val()));
    e.push(parseInt(jQuery(a + " .y2").val()));
    e.push(parseInt(jQuery(a + " .x3").val()));
    e.push(parseInt(jQuery(a + " .y3").val()));
    aa(b[c].actorElems[f], e, d);
  });
  jQuery(document).on("click", ".set_center_h", function() {
    var d = jQuery(this).attr("element_bind"), a = "#" + d;
    f = x(d);
    var e = b[c].actorElems[f].Actor, g = 0, g = "image" === b[c].actorElems[f].objType ? parseInt(n / 2 + t) : parseInt((n - e.width) / 2 + t);
    jQuery(a + " .x1").val(g);
    jQuery(a + " .x2").val(g);
    jQuery(a + " .x3").val(g);
    e = [];
    e.push(parseInt(jQuery(a + " .x1").val()));
    e.push(parseInt(jQuery(a + " .y1").val()));
    e.push(parseInt(jQuery(a + " .x2").val()));
    e.push(parseInt(jQuery(a + " .y2").val()));
    e.push(parseInt(jQuery(a + " .x3").val()));
    e.push(parseInt(jQuery(a + " .y3").val()));
    aa(b[c].actorElems[f], e, d);
  });
  jQuery(document).on("click", ".add_image_url_to_scene", function() {
    var d = jQuery(this).attr("elementBind");
    f = x(d);
    O(b[c].actorElems[f].Actor, b[c].actorElems[f].elemID, jQuery("#" + d + " .upload_image_button").val());
    b[c].actorElems[f].objSrc = jQuery("#" + d + " .upload_image_button").val();
    var a = b[c].actorElems[f].objSrc.substr(b[c].actorElems[f].objSrc.lastIndexOf("/") + 1);
    jQuery("#" + d).find("h3.handle span").html(a);
  });
  jQuery(".getCoordsBtn").live("click", function() {
    var d = "#" + jQuery(this).attr("elementBind");
    f = x(jQuery(this).attr("elementBind"));
    for (var a = b[c].actorElems[f].path.numControlPoints(), e = [], g = 0;g < a;g++) {
      e.push(b[c].actorElems[f].path.getControlPoint(g));
    }
    jQuery(d + " .x1").attr("value", parseInt(e[0].x));
    jQuery(d + " .y1").attr("value", parseInt(e[0].y));
    jQuery(d + " .x2").attr("value", parseInt(e[1].x));
    jQuery(d + " .y2").attr("value", parseInt(e[1].y));
    jQuery(d + " .x3").attr("value", parseInt(e[2].x));
    jQuery(d + " .y3").attr("value", parseInt(e[2].y));
  });
  jQuery(document).on("click", ".setCoordsBtn", function() {
    var d = "#" + jQuery(this).attr("elementBind");
    f = x(jQuery(this).attr("elementBind"));
    var a = [];
    a.push(parseInt(jQuery(d + " .x1").val()));
    a.push(parseInt(jQuery(d + " .y1").val()));
    a.push(parseInt(jQuery(d + " .x2").val()));
    a.push(parseInt(jQuery(d + " .y2").val()));
    a.push(parseInt(jQuery(d + " .x3").val()));
    a.push(parseInt(jQuery(d + " .y3").val()));
    aa(b[c].actorElems[f], a, jQuery(this).attr("elementBind"));
  });
  jQuery(".link-checkbox").live("click", function() {
    jQuery(this).find("input[type=checkbox]").is(":checked") ? (jQuery(this).parent().find(".uneditable-input").remove(), jQuery(this).parent().append('<input autocomplete="off" class="input-xlarge link-holder" type="text"></input>')) : (jQuery(this).parent().find(".link-holder").remove(), jQuery(this).parent().append('<span class="input-xlarge uneditable-input" style="max-width:255px;"></span>'));
  });
  jQuery(document).on("click", ".save-current-anim-element", function() {
    var d = "#" + jQuery(this).attr("elementBind");
    f = x(jQuery(this).attr("elementBind"));
    jQuery(d + " .setCoordsBtn").trigger("click");
    "singleBoxedText" == b[c].actorElems[f].objType && (b[c].actorElems[f].paddingH = parseInt(jQuery(d + " .padding-horizontal").html()), b[c].actorElems[f].paddingV = parseInt(jQuery(d + " .padding-vertical").html()), b[c].actorElems[f].bgRadius = parseInt(jQuery(d + " .bg-radius").html()));
    if ("singleText" == b[c].actorElems[f].objType || "singleBoxedText" == b[c].actorElems[f].objType) {
      jQuery(d + " .enable_shadow").length && (b[c].actorElems[f].enable_shadow = jQuery(d + " .enable_shadow").is(":checked"), "singleText" == b[c].actorElems[f].objType ? b[c].actorElems[f].Actor.setShadow(b[c].actorElems[f].enable_shadow) : b[c].actorElems[f].textActor.setShadow(b[c].actorElems[f].enable_shadow));
      var a = jQuery(this).parent().parent().parent().find(".current-font-size").html(), e = "" != jQuery(d + " .fontDataHolder").attr("fontData") ? jQuery(d + " .fontDataHolder").attr("fontData") : "sans";
      b[c].actorElems[f].objFont = e;
      b[c].actorElems[f].objFontSize = a;
      b[c].actorElems[f].fontStyle = jQuery(d + " .fontStyle").find(":selected").attr("element");
      if ("singleText" == b[c].actorElems[f].objType) {
        var g = e;
        g.indexOf(":") && (g = g.split(":"), g = g[0]);
        b[c].actorElems[f].Actor.setFont(b[c].actorElems[f].fontStyle + " " + a + " " + g);
      } else {
        g = e, g.indexOf(":") && (g = g.split(":"), g = g[0]), b[c].actorElems[f].textActor.setFont(b[c].actorElems[f].fontStyle + " " + a + " " + g);
      }
      if ("sans" != e) {
        for (var a = b[c].actorElems[f].elemID, g = !1, h = 0, k = 0, h = 0;h < v.length;h++) {
          for (k = 0;k < v[h].elemID.length;k++) {
            if (v[h].elemID[k] == a) {
              v[h].elemID.splice(k, 1);
              1 > v[h].elemID.length && v.splice(h, 1);
              break;
            }
          }
        }
        for (h = 0;h < v.length;h++) {
          v[h].font == e && (g = !0, v[h].font == e && (v[h].elemID.push(a), g = !0));
        }
        g || v.push({font:e, elemID:[a]});
        for (h = 0;h < v.length;h++) {
          for (k = 0;k < v[h].elemID.length;k++) {
          }
        }
      }
    }
    "singleText" == b[c].actorElems[f].objType && (b[c].actorElems[f].objColor = jQuery(this).parent().parent().parent().find(".wp-picker-container .wp-color-picker").val(), b[c].actorElems[f].Actor.setTextFillStyle(b[c].actorElems[f].objColor));
    "singleBoxedText" == b[c].actorElems[f].objType && (b[c].actorElems[f].objColor = jQuery(this).parent().parent().parent().find(".wp-picker-container .font-color").val(), b[c].actorElems[f].textActor.setTextFillStyle(b[c].actorElems[f].objColor), b[c].actorElems[f].objBGColor = jQuery(this).parent().parent().parent().find(".wp-picker-container .bg-color").val(), b[c].actorElems[f].objBGHoverColor = jQuery(this).parent().parent().parent().find(".wp-picker-container .bg-hover-color").val());
    "singleText" == b[c].actorElems[f].objType && (b[c].actorElems[f].objText = jQuery(this).parent().parent().parent().find(".text-holder").val(), b[c].actorElems[f].Actor.setText(b[c].actorElems[f].objText), jQuery("#" + jQuery(this).attr("elementBind")).find("h3.handle span").text(b[c].actorElems[f].objText));
    "singleBoxedText" == b[c].actorElems[f].objType && (b[c].actorElems[f].objText = jQuery(this).parent().parent().parent().find(".text-holder").val(), b[c].actorElems[f].textActor.setText(b[c].actorElems[f].objText), jQuery("#" + jQuery(this).attr("elementBind")).find("h3.handle span").text(b[c].actorElems[f].objText), e = Ba(b[c].actorElems[f].textActor.textWidth + b[c].actorElems[f].paddingH, b[c].actorElems[f].textActor.textHeight + b[c].actorElems[f].paddingV, b[c].actorElems[f].bgRadius, b[c].actorElems[f].objBGColor), 
    b[c].actorElems[f].Actor.setBackgroundImage(e), b[c].actorElems[f].textActor.centerAt((b[c].actorElems[f].textActor.textWidth + b[c].actorElems[f].paddingH) / 2, (b[c].actorElems[f].textActor.textHeight + b[c].actorElems[f].paddingV) / 2));
    b[c].actorElems[f].motionTime = 1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-time").text().replace(" sec.", ""));
    b[c].actorElems[f].delayTime = 1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-delay").text().replace(" sec.", ""));
    b[c].actorElems[f].scaleStart = Number(jQuery(d + " .scale-start").val());
    b[c].actorElems[f].scaleEnd = Number(jQuery(d + " .scale-end").val());
    b[c].actorElems[f].autoRotate = jQuery(d + " .autoRotate input").is(":checked");
    jQuery(d + " .auto_rotation_mode").length && (b[c].actorElems[f].auto_rotation_mode = jQuery(d + " .auto_rotation_mode").find(":selected").val());
    b[c].actorElems[f].hideBeginning = jQuery(d + " .hideElemBeginning input").is(":checked");
    b[c].actorElems[f].startAlpha = Number(jQuery(d + " .current-start-alpha").html());
    b[c].actorElems[f].endAlpha = Number(jQuery(d + " .current-end-alpha").html());
    b[c].actorElems[f].easing = w(jQuery(d + " .add-animation-easing").find(":selected").attr("element"));
    b[c].actorElems[f].easingName = jQuery(d + " .add-animation-easing").find(":selected").attr("element");
    b[c].actorElems[f].linkActive = jQuery(d + " .link-checkbox input").is(":checked");
    b[c].actorElems[f].linkActive ? (b[c].actorElems[f].objLink = jQuery(d).find(".link-holder").val(), "singleBoxedText" == b[c].actorElems[f].objType ? J(b[c].actorElems[f].Actor, b[c].actorElems[f].objLink, b[c].actorElems[f]) : J(b[c].actorElems[f].Actor, b[c].actorElems[f].objLink)) : "singleBoxedText" == b[c].actorElems[f].objType ? Da(b[c].actorElems[f].Actor, b[c].actorElems[f]) : Da(b[c].actorElems[f].Actor);
    0 < jQuery(d + " .outOfSceneMotion").find(":selected").length && (b[c].actorElems[f].outOfSceneMotion = jQuery(d + " .outOfSceneMotion").find(":selected").attr("element"), b[c].actorElems[f].outOfSceneTime = 1E3 * Number(jQuery(d + " .current-out-time").html()), b[c].actorElems[f].waitOnSceneTime = 1E3 * Number(jQuery(d + " .current-wait-time").html()));
  });
  jQuery(".play-current-anim-element").live("click", function() {
    f = x(jQuery(this).attr("elementBind"));
    var d = "#" + jQuery(this).attr("elementBind"), a = !1;
    if (b[c].actorElems[f] && 1 == b[c].actorElems[f].autoRotate && b[c].actorElems[f].auto_rotation_mode) {
      switch(b[c].actorElems[f].auto_rotation_mode) {
        case "LEFT_TO_RIGHT":
          a = CAAT.PathBehavior.autorotate.LEFT_TO_RIGHT;
          break;
        case "RIGHT_TO_LEFT":
          a = CAAT.PathBehavior.autorotate.RIGHT_TO_LEFT;
          break;
        case "FREE":
          a = CAAT.PathBehavior.autorotate.FREE;
          break;
        default:
          a = CAAT.PathBehavior.autorotate.FREE;
      }
    }
    b[c].actorElems[f].Actor.emptyBehaviorList().setRotation(0).setGlobalAlpha(!0).setScale(b[c].actorElems[f].scaleStart, b[c].actorElems[f].scaleStart).setAlpha(1 == b[c].actorElems[f].hideBeginning ? 0 : b[c].actorElems[f].startAlpha).addBehavior((new CAAT.Behavior.PathBehavior).setValues(b[c].actorElems[f].path).setDelayTime(1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-delay").html().replace(" sec.", "")), 1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-time").html().replace(" sec.", 
    ""))).setCycle(!1).setAutoRotate(b[c].actorElems[f].autoRotate ? !0 : !1, b[c].actorElems[f].autoRotate ? a : !1).setInterpolator(b[c].actorElems[f].easing)).addBehavior((new CAAT.Behavior.AlphaBehavior).setValues(b[c].actorElems[f].startAlpha, b[c].actorElems[f].endAlpha).setDelayTime(1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-delay").html().replace(" sec.", "")), 1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-time").html().replace(" sec.", 
    ""))).setInterpolator(b[c].actorElems[f].easing)).addBehavior((new CAAT.Behavior.ScaleBehavior).setInterpolator(b[c].actorElems[f].easing).setValues(Number(jQuery(d + " .scale-start").val()), Number(jQuery(d + " .scale-end").val()), Number(jQuery(d + " .scale-start").val()), Number(jQuery(d + " .scale-end").val())).setDelayTime(1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-delay").html().replace(" sec.", "")), 1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-time").html().replace(" sec.", 
    ""))));
    "noMotion" != b[c].actorElems[f].outOfSceneMotion && K(b[c].actorElems[f], b[c].actorElems[f].outOfSceneMotion);
  });
  jQuery(document).on("change", ".elem_checked_for_edit", function() {
    if (jQuery(this).is(":checked")) {
      var d = jQuery(this);
      f = x(d.attr("elementBind"));
      b[c].actorElems[f].Actor.alpha = 1;
      if (b[c].actorElems[f].pathRemoved) {
        b[c].path.addSegment(b[c].actorElems[f].path);
        b[c].pa.setPath(b[c].path);
        var a = b[c].actorElems[f].path.numControlPoints();
        b[c].actorElems[f].coordsArray = [];
        for (var e = 0;e < a;e++) {
          b[c].actorElems[f].coordsArray.push(b[c].actorElems[f].path.getControlPoint(e));
        }
        b[c].actorElems[f].pathRemoved = !1;
      }
      if (0 < b[c].actorElems.length) {
        for (var g = 0;g < b[c].actorElems.length;g++) {
          if (d.attr("elementBind") != b[c].actorElems[g].elemID) {
            for (b[c].actorElems[g].Actor.alpha = .4, jQuery("#" + b[c].actorElems[g].elemID).find(".elem_checked_for_edit:checked").attr("checked", !1), b[c].actorElems[g].pathRemoved || (sa(b[c].actorElems[g], b[c].actorElems[g].path), b[c].actorElems[g].pathRemoved = !0), a = b[c].actorElems[g].path.numControlPoints(), e = 0;e < a;e++) {
            }
          }
        }
      }
    } else {
      if (jQuery(this), 0 < b[c].actorElems.length) {
        for (d = 0;d < b[c].actorElems.length;d++) {
          b[c].actorElems[d].Actor.alpha = 1, jQuery("#" + b[c].actorElems[d].elemID).find(".elem_checked_for_edit:checked") && jQuery("#" + b[c].actorElems[d].elemID).find(".elem_checked_for_edit:checked").attr("checked", !1), b[c].actorElems[d].pathRemoved && (b[c].path.addSegment(b[c].actorElems[d].path), b[c].pa.setPath(b[c].path), b[c].actorElems[d].pathRemoved = !1);
        }
      }
    }
  });
  var U = !1, Ga;
  jQuery("#playBtn").live("click", function() {
    U || (U = !0, b[c].theScene.removeChild(b[c].pa), b[c].paRemoved = !0, L(), Ga = setTimeout(function() {
      b[c].theScene.addChild(b[c].pa);
      U = !1;
    }, 1E3 * b[c].sceneDetails.sceneDelay));
  });
  var H = !0;
  jQuery(document).on("click", "#stopAllScenesBtn", function() {
    for (var d = 0;d < b.length;d++) {
      !0 === b[d].paRemoved && (b[d].theScene.addChild(b[d].pa), b[d].paRemoved = !1);
    }
    H = !0;
    clearTimeout(Ga);
    Ea();
    for (d = 0;d < b[c].actorElems.length;d++) {
      b[c].actorElems[d].Actor.emptyBehaviorList();
    }
    U = !1;
    "undefined" != typeof M && clearInterval(M);
  });
  jQuery(document).on("click", "#playAllScenesBtn", function() {
    if (H) {
      for (var c = 0;c < b.length;c++) {
        b[c].theScene.removeChild(b[c].pa), b[c].paRemoved = !0;
      }
      H = !1;
      S();
    }
  });
  var M, f = 0;
  jQuery(".actor-element").live("click", function() {
    f = x(jQuery(this).attr("id"));
  });
  var A = 0, B = 0, Va = [], C = 0, D = 0;
  jQuery("table.actor-element thead").live("click", function() {
    jQuery(this).parent().find("tbody").toggle("fast");
  });
  jQuery(document).on("click", ".switchScenes", function() {
    var d = parseInt(c) + 1;
    d >= b.length && (d = 0);
    r.easeInOut(d, b[d].sceneDetails.incomingMotion, b[d].sceneDetails.incomingAnchor, c, b[c].sceneDetails.incomingMotion, b[c].sceneDetails.incomingAnchor, 1E3 * b[c].sceneDetails.sceneTime, 1, w(b[d].sceneDetails.incomingEasing), w(b[c].sceneDetails.incomingEasing));
    c = d;
    H ? L() : (clearInterval(M), S());
  });
  jQuery(document).on("click", ".switchScenesBack", function() {
    var d = parseInt(c) - 1;
    0 > c - 1 && (d = b.length - 1);
    r.easeInOut(d, b[d].sceneDetails.incomingMotion, b[d].sceneDetails.incomingAnchor, c, b[c].sceneDetails.incomingMotion, b[c].sceneDetails.incomingAnchor, 1E3 * b[c].sceneDetails.sceneTime, 1, w(b[d].sceneDetails.incomingEasing), w(b[c].sceneDetails.incomingEasing));
    c = d;
    H ? L() : (clearInterval(M), S());
  });
})();